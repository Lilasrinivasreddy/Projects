INSERT INTO vz-it-np-izcv-dev-idmcdo-0.dga_dq_tbls.dqaas_profile_rpt
(
    rpt_seq_num, prfl_id, prfl_type, dq_pillar, src_tbl, meas_name,
    data_dt, feature_name, grouped_columns, count_curr, prfl_run_ts, weekday
)
SELECT
    900098 AS rpt_seq_num,
    7851 AS prfl_id,
    'CUSTOM_RULES' AS prfl_type,
    'Consistency' AS dq_pillar,
    'CUST_ACCT_LINE_ADDR_V' AS src_tbl,
    'CUST_ACCT_LINE_ADDR_V Table count' AS meas_name,
    CAST(LAST_UPD_DT AS DATE) AS data_dt,
    'Tier1 Models' AS feature_name,
    NULL AS grouped_columns,
    COUNT(*) AS count_curr,
    CURRENT_TIMESTAMP AS prfl_run_ts,
    DAYOFWEEK(CAST(LAST_UPD_DT AS DATE)) AS weekday
FROM NTL_PRD_ALLVM.CUST_ACCT_LINE_ADDR_V
WHERE CAST(LAST_UPD_DT AS DATE) >= CURRENT_DATE - 90
GROUP BY 1,2,3,4,5,6,7,8,11,12;



import os
import logging
import pandas as pd
import teradatasql
from google.cloud import bigquery
import google.auth
import pandas_gbq
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View

# ‚úÖ Teradata Configuration
dq_td_config = {
    "hostname": "TDDP.TDC.VZWCORP.COM",
    "uid": "IDQPRDLD",
    "pwd": "Newpass#969",
    "dbname": "idq_prd_tbls"
}

# ‚úÖ BigQuery Configuration
dq_config = {
    "sa_json_file_dtls": os.path.join(os.path.dirname(__file__), "sa-pr-izcv-app-idmcdo-0-oidc-27472-config.json"),
    "conn_project_id": "vz-it-pr-izcv-idmcdo-0",
    "bq_table_name": "your_project.your_dataset.teradata_results"
}

# ‚úÖ Initialize Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ‚úÖ Initialize Teradata Client
def teradata_client():
    try:
        conn = teradatasql.connect(
            host=dq_td_config["hostname"],
            user=dq_td_config["uid"],
            password=dq_td_config["pwd"],
            database=dq_td_config["dbname"]
        )
        logger.info("‚úÖ Teradata connection successful!")
        return conn
    except Exception as err:
        logger.error(f"‚ùå Error connecting to Teradata: {err}")
        return None

# ‚úÖ Initialize BigQuery Client
def bigquery_client():
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = dq_config["sa_json_file_dtls"]
    credentials, _ = google.auth.default()
    return bigquery.Client(credentials=credentials, project=dq_config["conn_project_id"]), credentials

# ‚úÖ Load Data into BigQuery
def load_result_to_bq(bq_client, df):
    if df.empty:
        logger.warning("‚ö†Ô∏è No data to insert into BigQuery")
        return

    pandas_gbq.to_gbq(
        dataframe=df,
        destination_table=dq_config["bq_table_name"],
        if_exists="append",
        credentials=bq_client,
        project_id=dq_config["conn_project_id"]
    )
    logger.info(f"‚úÖ Successfully loaded {len(df)} rows into BigQuery")

# ‚úÖ Django API View
@method_decorator(csrf_exempt, name="dispatch")
class ExecuteHistorySQL(View):
    def post(self, request):
        try:
            logger.info(f"üìÇ Received FILES: {request.FILES}")

            if "file" not in request.FILES:
                return JsonResponse({"status": "failure", "message": "No file uploaded."}, status=400)

            file = request.FILES["file"]
            query = file.read().decode("utf-8").strip()

            logger.info(f"üìå Executing Query:\n{query}")

            # ‚úÖ Open Teradata Connection
            conn = teradata_client()
            if conn is None:
                return JsonResponse({"status": "failure", "message": "Teradata connection failed."}, status=500)

            cursor = conn.cursor()

            # ‚úÖ Handling Insert Queries
            if query.lower().startswith("insert into"):
                logger.info("‚úÖ Detected INSERT query. Extracting SELECT statement for execution.")
                
                # Extract the `SELECT` part of the `INSERT INTO ... SELECT`
                select_query = query.split("SELECT", 1)[1].strip()
                select_query = "SELECT " + select_query  # Add back the SELECT keyword
                
                logger.info(f"üìå Extracted SELECT Query:\n{select_query}")

                # ‚úÖ Execute `SELECT` on Teradata
                cursor.execute(select_query)
                results_list = cursor.fetchall()

                if not results_list:
                    logger.warning(f"‚ö†Ô∏è SELECT query returned no data")
                    return JsonResponse({"status": "failure", "message": "No data returned from SELECT query"}, status=400)

                df = pd.DataFrame(results_list, columns=[desc[0] for desc in cursor.description])

                # ‚úÖ Load Data into BigQuery
                bq_client, _ = bigquery_client()
                load_result_to_bq(bq_client, df)

                return JsonResponse({"status": "success", "message": f"INSERT executed. {len(df)} rows inserted into BigQuery"}, status=200)

            else:
                logger.warning("‚ö†Ô∏è Unsupported query type")
                return JsonResponse({"status": "failure", "message": "Only INSERT INTO ... SELECT queries are supported"}, status=400)

        except Exception as e:
            logger.error(f"‚ùå Error processing request: {e}")
            return JsonResponse({"status": "failure", "message": str(e)}, status=500)
