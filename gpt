import os
import logging
import pandas as pd
import teradatasql
from google.cloud import bigquery
from google.oauth2 import service_account
import pandas_gbq
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View

# ‚úÖ Teradata Configuration
dq_td_config = {
    "hostname": "TDDP.TDC.VZWCORP.COM",
    "uid": "IDQPRDLD",
    "pwd": "Newpass#969",
    "dbname": "idq_prd_tbls"
}

# ‚úÖ GCP BigQuery Configuration
SERVICE_ACCOUNT_FILE = "C:\\Users\\reddyvu\\Desktop\\smartdq\\dq_api\\config\\sa-pr-izcv-app-idmcdo-0-oidc-27472-config.json"
BQ_PROJECT_ID = "vz-it-pr-izcv-idmcdo-0"
BQ_DEST_TABLE = "your_project.your_dataset.teradata_results"  # ‚úÖ Update to correct BigQuery table

# ‚úÖ Logging Setup
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ‚úÖ Initialize BigQuery Client
def bigquery_client():
    credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE)
    client = bigquery.Client(credentials=credentials, project=credentials.project_id)
    return client, credentials

# ‚úÖ Initialize Teradata Client
def teradata_client():
    try:
        conn = teradatasql.connect(
            host=dq_td_config["hostname"],
            user=dq_td_config["uid"],
            password=dq_td_config["pwd"],
            database=dq_td_config["dbname"]
        )
        return conn
    except Exception as err:
        logger.error(f"‚ùå Error connecting to Teradata: {err}")
        return None

# ‚úÖ Load DataFrame to BigQuery
def load_result_to_bq(dq_bq_client, df_load_data):
    try:
        logger.info(f"üìå Loading results into BigQuery: {BQ_DEST_TABLE}")
        
        if df_load_data.empty:
            logger.warning(f"‚ö†Ô∏è No data to insert into BigQuery for table {BQ_DEST_TABLE}")
            return
        
        pandas_gbq.to_gbq(
            dataframe=df_load_data,
            destination_table=BQ_DEST_TABLE,
            if_exists="append",
            credentials=dq_bq_client,
            project_id=BQ_PROJECT_ID
        )
        logger.info(f"‚úÖ Successfully loaded {len(df_load_data)} rows into {BQ_DEST_TABLE}")
    except Exception as err:
        logger.error(f"‚ùå Error loading results into BigQuery: {err}")

# ‚úÖ Django View to Process SQL File Upload
@method_decorator(csrf_exempt, name="dispatch")
class ExecuteHistorySQL(View):
    def post(self, request):
        try:
            logger.info(f"üìÇ Received FILES: {request.FILES}")

            if "file" not in request.FILES:
                return JsonResponse({"status": "failure", "message": "No file uploaded."}, status=400)

            file = request.FILES["file"]
            queries = file.read().decode("utf-8").strip().split(";")
            results = {}

            for query in queries:
                query = query.strip()
                if not query:
                    continue

                # ‚úÖ Log the exact query for debugging
                logger.info(f"üìå Executing query: {query}")

                try:
                    conn = teradata_client()
                    if conn is None:
                        return JsonResponse({"status": "failure", "message": "Teradata connection failed."}, status=500)

                    cursor = conn.cursor()

                    # ‚úÖ Execute query
                    cursor.execute(query)
                    
                    if query.lower().startswith("select"):
                        results_list = cursor.fetchall()
                        if not results_list:
                            logger.warning(f"‚ö†Ô∏è Query returned no data: {query}")
                            continue

                        df = pd.DataFrame(results_list, columns=[desc[0] for desc in cursor.description])
                        bq_client, bq_creds = bigquery_client()
                        load_result_to_bq(dq_bq_client=bq_client, df_load_data=df)

                        results[query[:30]] = f"TD to GCP Query executed successfully. {len(df)} rows inserted."

                    cursor.close()
                    conn.close()

                except Exception as e:
                    logger.error(f"‚ùå Query execution failed: {query}\nError: {e}")
                    return JsonResponse({"status": "failure", "message": str(e)}, status=500)

            return JsonResponse({"status": "success", "results": results}, status=200)

        except Exception as e:
            logger.error(f"‚ùå Error processing request: {e}")
            return JsonResponse({"status": "failure", "message": str(e)}, status=500)
