import sys
import os
import logging
from datetime import datetime
from google.cloud import bigquery

# Import User Defined Modules
sys.path.insert(1, os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir)))
from config_data import get_config, set_logger

class ExecutionLogger:
    def __init__(self):
        self.config = get_config()
        self.client = bigquery.Client()
        
        # Logger Setup
        self.logger = set_logger(
            logger_path=self.config["log_dir"],
            log_filename="execution_logger",
            process_name="ExecutionLogger"
        )

    def log_job_execution(self, job_id, job_name, job_start_ts, job_end_ts, step_code, comments):
        """
        Logs job execution details into `dqaas_job_monitor_report`.
        """
        entry_ts = datetime.now()

        query = f"""
        INSERT INTO `{self.config['gcp_metadata_db']['dq_project_id']}.{self.config['sql_rule_profile']['dq_dataset_name']}.dqaas_job_monitor_report`
        (job_id, job_name, job_start_ts, job_end_ts, entry_ts, user_id, step_code, comments)
        VALUES (@job_id, @job_name, @job_start_ts, @job_end_ts, @entry_ts, @user_id, @step_code, @comments)
        """

        params = {
            "job_id": job_id,
            "job_name": job_name,
            "job_start_ts": job_start_ts,
            "job_end_ts": job_end_ts,
            "entry_ts": entry_ts,
            "user_id": self.config['user_id'],
            "step_code": step_code,
            "comments": comments or "N/A"
        }

        self.logger.info(f"Logging job execution to dqaas_job_monitor_report: {params}")
        try:
            self.client.query(query, params).result()
            self.logger.info(f"Inserted job execution details into dqaas_job_monitor_report")
        except Exception as e:
            self.logger.error(f"Error logging execution to dqaas_job_monitor_report: {str(e)}")

    def log_profile_execution(self, profile_id, table_name, run_status, profile_date, comments):
        """
        Logs profiling execution details into `dqaas_run_rule_ctrl_tbl`.
        """
        run_ts = datetime.now()

        query = f"""
        INSERT INTO `{self.config['gcp_metadata_db']['dq_project_id']}.{self.config['sql_rule_profile']['dq_dataset_name']}.dqaas_run_rule_ctrl_tbl`
        (profile_id, table_name, run_ts, run_status, profile_date, comments)
        VALUES (@profile_id, @table_name, @run_ts, @run_status, @profile_date, @comments)
        """

        params = {
            "profile_id": profile_id,
            "table_name": table_name,
            "run_ts": run_ts,
            "run_status": run_status or "Not Started",
            "profile_date": profile_date,
            "comments": comments or "N/A"
        }

        self.logger.info(f"Logging profile execution to dqaas_run_rule_ctrl_tbl: {params}")
        try:
            self.client.query(query, params).result()
            self.logger.info(f"Inserted profiling execution details into dqaas_run_rule_ctrl_tbl")
        except Exception as e:
            self.logger.error(f"Error logging execution to dqaas_run_rule_ctrl_tbl: {str(e)}")

# Example usage (for testing)
if __name__ == "__main__":
    logger = ExecutionLogger()
    
    # Sample test data
    logger.log_job_execution(
        job_id=101,
        job_name="DQ-Processing",
        job_start_ts=datetime.now(),
        job_end_ts=datetime.now(),
        step_code="rule",
        comments="Test execution"
    )

    logger.log_profile_execution(
        profile_id=223,
        table_name="outlet_v",
        run_status="Successful",
        profile_date=datetime.now().date(),
        comments="Test profiling execution"
    )