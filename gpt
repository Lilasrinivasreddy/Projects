import logging

# Configure logging
logging.basicConfig(
    filename='custom_metrics.log', 
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logging.info("Starting execution of custom_metrics.py")
==============

def fetch_data_from_bigquery(query: str, client):
    logging.info(f"Executing BigQuery: {query}")
    try:
        df = client.query(query).to_dataframe()
        logging.info(f"Fetched {len(df)} records from BigQuery")
        return df
    except Exception as e:
        logging.error(f"Error while fetching data: {str(e)}", exc_info=True)
        raise
===============

def validate_and_cast_data(df):
    try:
        logging.info(f"Before type conversion: Data types\n{df.dtypes}")
        
        # Explicit type casting
        df['rpt_seq_num'] = df['rpt_seq_num'].astype(int, errors='ignore')
        df['count_curr'] = df['count_curr'].astype(int, errors='ignore')
        df['avg_count_prev'] = df['avg_count_prev'].astype(float, errors='ignore')

        logging.info(f"After type conversion: Data types\n{df.dtypes}")

        return df
    except Exception as e:
        logging.error(f"Type conversion error: {str(e)}", exc_info=True)
        raise
==================

def load_to_bigquery(df, table_id, client):
    logging.info(f"Loading {len(df)} records into BigQuery table: {table_id}")
    
    try:
        client.load_table_from_dataframe(df, table_id).result()
        logging.info(f"Successfully loaded data into {table_id}")
    except Exception as e:
        logging.error(f"Failed to load data into BigQuery: {str(e)}", exc_info=True)
        raise
===================

if __name__ == "__main__":
    logging.info("Custom metrics script execution completed successfully.")
