"""
Author: sreekanth.kc1@
Description: This Python files contains function which is invoked by the Alert Suppression DAG.
"""

from airflow import DAG
from datetime import timedelta
from airflow.utils.dates import days_ago
from airflow.operators.dummy import DummyOperator
from airflow.operators.python_operator import PythonOperator
from functools import partial


import importlib
dag_failure_callback_module = importlib.import_module(f"vz-it-hgrv-aidedo-0.utilities.dag_failure_callback")
email_list = "sreekanth.kc1@verizon.com,satish.koppisetty@verizon.com"


def test(**context):
    k = 10 / 0
    print("-------------------->>>>>>", k)


default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'on_failure_callback': partial(dag_failure_callback_module.custom_dag_failure_alert, email_list),
    'start_date': days_ago(1),
    'email_on_retry': False,
    "retries": 0,
    'retry_delay': timedelta(minutes=1)
}

with DAG(
        f"dg_alert_test",
        default_args=default_args,
        schedule_interval='*/2 * * * *',
        max_active_runs=1,
        catchup=False,
        description='Ths dag is for enable/disable alerts',
        concurrency=3
) as dag:
    test = PythonOperator(task_id='test',
                          python_callable=test,
                          dag=dag)

    end = DummyOperator(
        task_id="end",
        dag=dag)

test >> end
-------------------------------------------------------------------------------------------------------------------
ef custom_dag_failure_alert(email_list, context):
    import importlib
    from airflow.models import Variable

    email_module = importlib.import_module(f"vz-it-hgrv-aidedo-0.utilities.email_module")
    environment_value = Variable.get('composer_env')
    from_email = 'do-not-reply@verizon.com'

    task_instance = context['task_instance']
    print(f"task {task_instance.task_id} failed in dag {task_instance.dag_id} ")

    email_body = f"""<!DOCTYPE html>
                                    <html>
                                    <body>
                                        <br>DAG ID : {task_instance.dag_id} 
                                        <br>Task ID: {task_instance.task_id}
                                        <br>Run ID: {context['run_id']}
                                        <br>Log URL: {task_instance.log_url}
                                        <br>Try: {task_instance.try_number} 
                                        <br>Error: {str(context['exception'])}
                                    </body>
                                    </html>"""

    email_subject = f"Airflow | Failure | {environment_value.upper()} | {task_instance.dag_id} | {task_instance.task_id}"
    email_module.send_email(from_email, email_list, email_subject, email_body)
    return True
--------------------------------------------------------------------------------------------------------
def send_email(from_email, to_email, email_subject, email_body):
    """
    Send email notification.
    input:
        from_email: string - from email address.
        to_email: string - to email address.
        email_subject: string - email subject.
        email_body: string - email body
    return:
        status: boolean
    """
    import smtplib
    from email.message import EmailMessage
    try:
        msg = EmailMessage()
        msg.set_content(email_body, subtype='html')
        msg["Subject"] = email_subject
        msg["From"] = from_email
        msg["To"] = to_email
        smtp_object = smtplib.SMTP("vzsmtp.verizon.com", 25)
        smtp_object.starttls()
        smtp_object.send_message(msg)
        print("Successfully sent email!")
        smtp_object.quit()
        return True
    except Exception as e:
        print(f"----------------->>>>>>>>>>>>>Unable to send the email, {e}")
        return False
