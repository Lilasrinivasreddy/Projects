import pandas as pd
import numpy as np
import math
from datetime import datetime
from opsgenie_sdk import Alert  # Assuming an Opsgenie SDK is used

class CustomeMetrics:
    def __init__(self, data_src=None) -> None:
        self.__set_default_values()
        self.logger: logging = set_logger(
            logger_path=config.LOGS_DIR,
            log_filename="CustomMetricsLogs",
            process_name='CRM',
        )
        self.utils = CommonUtils(config, self.logger)
        self.df_email_distro = pd.DataFrame()

    def check_sigma_outlier_alerts(self, df_rules: pd.DataFrame):
        """
        Checks for outliers in the SIGMA VALUE column and triggers an Opsgenie alert if an outlier is detected.

        Parameters:
            df_rules (pd.DataFrame): DataFrame containing rule profile data with a 'sigma_value' column.

        Returns:
            None
        """
        try:
            opsgenie_alert_info = []

            # Ensure 'sigma_value' column exists
            if 'sigma_value' not in df_rules.columns:
                self.logger.error("The column 'sigma_value' is missing in the dataset.")
                return

            # Filter outliers
            outlier_records = df_rules[df_rules['sigma_value'] == 'outlier']

            if outlier_records.empty:
                self.logger.info("No outliers found. No alert needed.")
                return
            
            # Process each outlier row
            for idx, row in outlier_records.iterrows():
                alert_message = f"Alert: Sigma Value Outlier detected for Rule {row['meas_name']}"
                
                # Opsgenie Alert Details
                alert_type = 'Sigma_Outlier'
                priority = 'P2'  # Set priority to P2 (High)
                env = config.get_config_values('environment', 'env')

                details = {
                    'Message': f"Sigma Value Outlier detected: {row['sigma_value']}",
                    'Sub domain': row['data_sub_dmn'],
                    'Table': row['src_tbl'],
                    'Column': row['grouped_columns'],
                    'DQ Score': row['dq_score'],
                    'Threshold': row['max_thresh_value'],
                    'Alert Type': alert_type
                }

                # Fetch Opsgenie API Key
                api_key = row['OPSGENIE_API_KEY']
                if pd.isna(api_key) or api_key in config.EMPTY_STR_LIST:
                    api_key = config.get_config_values('opsgenie', 'api_key')

                # Initialize Opsgenie Client
                gcp_http_proxy_url = config.GCP_HTTP_PROXY_URL
                opsgenie_client = Alert(api_key=api_key, proxy=gcp_http_proxy_url)

                # Send Opsgenie alert
                response, request_id, message = opsgenie_client.create_opsgenie_alert(
                    df_rules, idx, alert_type, priority, env, 'sigma_outlier'
                )

                self.logger.info(f"Opsgenie response: {response}, Alert Sent: {message}")

                # Store alert info
                opsgenie_alert_info.append({
                    'rule_id': row['prfl_id'],
                    'feature_name': row['feature_name'],
                    'data_bus_elem': row['data_bus_elem'],
                    'data_dmn': row['data_dmn'],
                    'data_sub_dmn': row['data_sub_dmn'],
                    'data_src': row['data_src'],
                    'db_name': row['db_name'],
                    'src_tbl': row['src_tbl'],
                    'grouped_columns': row['grouped_columns'],
                    'dq_score': row['dq_score'],
                    'threshold': row['max_thresh_value'],
                    'meas_rule': row['meas_name'],
                    'request_id': request_id,
                    'alert_message': message
                })

            # Convert alert info into a DataFrame and load to Opsgenie alert report
            opsgenie_table_info = pd.DataFrame.from_records(opsgenie_alert_info)
            opsgenie_table_info = opsgenie_table_info.reset_index(drop=True)

            # Load alert data to reporting table
            self.load_opsgenie_alert_info(opsgenie_table_info)

        except Exception as err:
            self.logger.error(f"Error in check_sigma_outlier_alerts: {err}")

    def main(self):
        try:
            self.laod_historical_report()
            df_mtd = self.get_metadata()
            
            sub_domain_list = df_mtd['data_sub_dmn'].unique().tolist()
            start_date = "current_date-1"
            end_date = "current_date-1"
            
            for dmn in sub_domain_list:
                df_result = self.run_metrics_engine(
                    df_mtd=df_mtd,
                    start_date=start_date,
                    end_date=end_date
                )

                # Trigger Sigma Value Alerts
                self.check_sigma_outlier_alerts(df_result)
            
        except ValueError as err:
            self.logger.error(err)
        except Exception as err:
            self.logger.error(f"Error in Main Block. Error {err}")
=========
=========
=========

def check_sigma_outlier_alerts(self, df_rules: pd.DataFrame):
    """
    Checks for outliers in the 'sigma_value' column and triggers an Opsgenie alert if an outlier is detected.

    Parameters:
        df_rules (pd.DataFrame): DataFrame containing rule profile data with a 'sigma_value' column.

    Returns:
        None
    """
    try:
        opsgenie_alert_info = []

        # Ensure 'sigma_value' column exists
        if 'sigma_value' not in df_rules.columns:
            self.logger.error("The column 'sigma_value' is missing in the dataset.")
            return

        # Filter records where sigma_value is an outlier
        outlier_records = df_rules[df_rules['sigma_value'] == 'outlier']

        if outlier_records.empty:
            self.logger.info("No outliers found. No alert needed.")
            return
        
        # Process each outlier row
        for idx, row in outlier_records.iterrows():
            alert_message = f"Alert: Sigma Value Outlier detected for Rule {row['meas_name']}"
            
            # Opsgenie Alert Details
            alert_type = 'Sigma_Outlier'
            priority = 'P2'  # Set priority to P2 (High)
            env = config.get_config_values('environment', 'env')

            details = {
                'Message': f"Sigma Value Outlier detected: {row['sigma_value']}",
                'Sub domain': row['data_sub_dmn'],
                'Table': row['src_tbl'],
                'Column': row['grouped_columns'],
                'DQ Score': row['dq_score'],
                'Threshold': row['max_thresh_value'],
                'Alert Type': alert_type
            }

            # Fetch Opsgenie API Key
            api_key = row['OPSGENIE_API_KEY']
            if pd.isna(api_key) or api_key in config.EMPTY_STR_LIST:
                api_key = config.get_config_values('opsgenie', 'api_key')

            # Initialize Opsgenie Client
            gcp_http_proxy_url = config.GCP_HTTP_PROXY_URL
            opsgenie_client = Alert(api_key=api_key, proxy=gcp_http_proxy_url)

            # Send Opsgenie alert
            response, request_id, message = opsgenie_client.create_opsgenie_alert(
                df_rules, idx, alert_type, priority, env, 'sigma_outlier'
            )

            self.logger.info(f"Opsgenie response: {response}, Alert Sent: {message}")

            # Store alert info
            opsgenie_alert_info.append({
                'rule_id': row['prfl_id'],
                'feature_name': row['feature_name'],
                'data_bus_elem': row['data_bus_elem'],
                'data_dmn': row['data_dmn'],
                'data_sub_dmn': row['data_sub_dmn'],
                'data_src': row['data_src'],
                'db_name': row['db_name'],
                'src_tbl': row['src_tbl'],
                'grouped_columns': row['grouped_columns'],
                'dq_score': row['dq_score'],
                'threshold': row['max_thresh_value'],
                'meas_rule': row['meas_name'],
                'request_id': request_id,
                'alert_message': message
            })

        # Convert alert info into a DataFrame and load to Opsgenie alert report
        opsgenie_table_info = pd.DataFrame.from_records(opsgenie_alert_info)
        opsgenie_table_info = opsgenie_table_info.reset_index(drop=True)

        # Load alert data to reporting table
        self.load_opsgenie_alert_info(opsgenie_table_info)

    except Exception as err:
        self.logger.error(f"Error in check_sigma_outlier_alerts: {err}")
======\
======
======
def main(self):
    try:
        self.laod_historical_report()
        df_mtd = self.get_metadata()
        
        sub_domain_list = df_mtd['data_sub_dmn'].unique().tolist()
        start_date = "current_date-1"
        end_date = "current_date-1"
        
        for dmn in sub_domain_list:
            df_result = self.run_metrics_engine(
                df_mtd=df_mtd,
                start_date=start_date,
                end_date=end_date
            )

            # ðŸ”¹ Add this line to trigger Sigma Value Outlier Alerts
            self.check_sigma_outlier_alerts(df_result)
        
    except ValueError as err:
        self.logger.error(err)
    except Exception as err:
        self.logger.error(f"Error in Main Block. Error {err}")
====
def calculate_sigma_value(df):
    print("calculate_sigma_value")
    df['std_dev_value'] = df['std_dev_value'].astype(float)
    df['count_curr'] = df['count_curr'].fillna(0).astype(float)
    df['avg_count_prev'] = df['avg_count_prev'].astype(float)

    conditions_null_dim = [
        (df['count_curr'] >= df['avg_count_prev'].fillna(0).astype(float) - 1 * df['std_dev_value'].fillna(0).astype(float)) & 
        (df['count_curr'] <= df['avg_count_prev'].fillna(0).astype(float) + 1 * df['std_dev_value'].fillna(0).astype(float)),
        
        (df['count_curr'] >= df['avg_count_prev'].fillna(0).astype(float) - 2 * df['std_dev_value'].fillna(0).astype(float)) & 
        (df['count_curr'] <= df['avg_count_prev'].fillna(0).astype(float) + 2 * df['std_dev_value'].fillna(0).astype(float)),
        
        (df['count_curr'] >= df['avg_count_prev'].fillna(0).astype(float) - 3 * df['std_dev_value'].fillna(0).astype(float)) & 
        (df['count_curr'] <= df['avg_count_prev'].fillna(0).astype(float) + 3 * df['std_dev_value'].fillna(0).astype(float)),
        
        pd.isna(df['grouped_columns'])
    ]

    choices = [1, 2, 3, 'outlier']
    df['sigma_value'] = np.select(conditions_null_dim, choices, default='outlier')
=====
=====
def load_opsgenie_alert_info(self, opsgenie_table_info: pd.DataFrame):
    try:
        if opsgenie_table_info.empty:
            self.logger.info("No alerts to log. Skipping alert storage.")
            return
        
        self.utils.load_result_to_bq_report_table(
            dq_bq_client=self.utils.bigquery_client(auth=config.dq_gcp_auth_payload)[0],
            dq_credentials=config.dq_gcp_auth_payload,
            dq_report_table_name=config.dqaas_alerts_table,
            df_load_data=opsgenie_table_info,
            seq_name='alert_seq_num'
        )
        self.logger.info("Opsgenie Alert Data successfully loaded into BQ table.")
        
    except Exception as err:
        self.logger.error(f"Error in load_opsgenie_alert_info: {err}")
=====
=====
