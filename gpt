def load_to_report_results(self, df_report_result: pd.DataFrame, reference_key: str):
    try:
        ## BigQuery Client Connection
        dbclient, db_creds = self.utils.bigquery_client(
            auth=config.dq_gcp_auth_payload
        )

        df_report_result["rpt_ref_key"] = reference_key

        df_report_result = df_report_result.rename(columns={col: str(col).lower() for col in df_report_result.columns.tolist()})

        ## Add dtype conversion **before** inserting into BigQuery
        import pandas as pd

        # Ensure date columns are properly formatted
        df_report_result['data_dt'] = pd.to_datetime(df_report_result['data_dt'], errors='coerce')
        df_report_result['insert_date'] = pd.to_datetime(df_report_result['insert_date'], errors='coerce')
        df_report_result['prfl_run_ts'] = pd.to_datetime(df_report_result['prfl_run_ts'], errors='coerce')

        # Convert numeric columns
        df_report_result['prfl_id'] = pd.to_numeric(df_report_result['prfl_id'], errors='coerce', downcast='integer')
        df_report_result['count_curr'] = pd.to_numeric(df_report_result['count_curr'], errors='coerce')
        df_report_result['weekday'] = pd.to_numeric(df_report_result['weekday'], errors='coerce', downcast='integer')
        df_report_result['rpt_seq_num'] = pd.to_numeric(df_report_result['rpt_seq_num'], errors='coerce', downcast='integer')
        df_report_result['dq_score'] = pd.to_numeric(df_report_result['dq_score'], errors='coerce', downcast='integer')

        # Convert statistical columns (ensure they are float)
        df_report_result['avg_count_prev'] = pd.to_numeric(df_report_result['avg_count_prev'], errors='coerce')
        df_report_result['variance_value'] = pd.to_numeric(df_report_result['variance_value'], errors='coerce')
        df_report_result['std_dev_value'] = pd.to_numeric(df_report_result['std_dev_value'], errors='coerce')
        df_report_result['sigma_2_value'] = pd.to_numeric(df_report_result['sigma_2_value'], errors='coerce')
        df_report_result['min_thresh_value'] = pd.to_numeric(df_report_result['min_thresh_value'], errors='coerce')
        df_report_result['max_thresh_value'] = pd.to_numeric(df_report_result['max_thresh_value'], errors='coerce')

        # Convert categorical columns to string
        df_report_result['feature_name'] = df_report_result['feature_name'].astype(str)
        df_report_result['grouped_columns'] = df_report_result['grouped_columns'].astype(str)
        df_report_result['prfl_type'] = df_report_result['prfl_type'].astype(str)
        df_report_result['src_tbl'] = df_report_result['src_tbl'].astype(str)
        df_report_result['dq_pillar'] = df_report_result['dq_pillar'].astype(str)
        df_report_result['meas_name'] = df_report_result['meas_name'].astype(str)
        df_report_result['dq_ind'] = df_report_result['dq_ind'].astype(str)
        df_report_result['rpt_ref_key'] = df_report_result['rpt_ref_key'].astype(str)

        # Check for missing values and replace with defaults
        df_report_result.fillna({'prfl_id': 0, 'count_curr': 0, 'weekday': 0, 'dq_score': 0}, inplace=True)
        df_report_result.fillna({'avg_count_prev': 0.0, 'variance_value': 0.0, 'std_dev_value': 0.0, 
                                 'sigma_2_value': 0.0, 'min_thresh_value': 0.0, 'max_thresh_value': 0.0}, inplace=True)

        # Print the final data types before inserting
        self.logger.info(f'df_report_result dtypes:\n{df_report_result.dtypes}')

        ## Loading Table Level Report
        self.utils.load_result_to_bq_report_table(
            dq_bq_client=dbclient,
            dq_credentials=db_creds,
            dq_report_table_name=config.dqaas_profile_rpt,
            df_load_data=df_report_result,
            seq_name='rpt_seq_num',
            column_details=self.custom_profile_report_columns
        )

    except Exception as err:
        self.logger.error(f" {err}")
