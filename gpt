# Monitor Table
def log_monitor_table(self, job_id, job_name, job_start_ts, job_end_ts, entry_ts, user_id, step_code, comments):
    """
    Log the job step into the monitor table, including the user ID.
    """
    # Handle NULL job_end_ts properly
    if job_end_ts is None or str(job_end_ts).lower() == 'null':
        query = f"""
        INSERT INTO {self.dq_gcp_data_project_id}.{self.dq_bq_dataset}.{self.monitor_table} 
        (job_id, job_name, job_start_ts, job_end_ts, entry_ts, user_id, step_code, comments)
        VALUES ({job_id}, '{job_name}', '{job_start_ts}', NULL, '{entry_ts}', '{user_id}', '{step_code}', '{comments}')"""
    else:
        query = f"""
        INSERT INTO {self.dq_gcp_data_project_id}.{self.dq_bq_dataset}.{self.monitor_table} 
        (job_id, job_name, job_start_ts, job_end_ts, entry_ts, user_id, step_code, comments)
        VALUES ({job_id}, '{job_name}', '{job_start_ts}', timestamp('{job_end_ts}'), '{entry_ts}', '{user_id}', '{step_code}', '{comments}')"""

    # Log the query for debugging
    self.logger.info(f"Executing Query: {query}")

    try:
        # Execute the query
        self.client.query(query).result()
        self.logger.info(f"Inserted into monitor table: {comments}")
    except Exception as e:
        self.logger.error(f"Error logging to monitor table: {str(e)}")
        raise
