## Comparing Historical and Current Records
def compare_historical_latest_dimensions(self, df_tbl_hist_rec, df_tbl_latest_rec: pd.DataFrame, comparison_type="WEEKDAYS", isHourly="N"):
    
    ## Logging Initial Data
    self.logger.info('------------------------------------------------------------------')
    self.logger.info(f"Historical DataFrame Columns: {df_tbl_hist_rec.columns.tolist()}")
    self.logger.info(f"Latest DataFrame Columns: {df_tbl_latest_rec.columns.tolist()}")
    self.logger.info(f"Historical DataFrame Data Types:\n{df_tbl_hist_rec.dtypes}")
    self.logger.info(f"Latest DataFrame Data Types:\n{df_tbl_latest_rec.dtypes}")
    self.logger.info(f"Historical DataFrame Sample:\n{df_tbl_hist_rec.head()}")
    self.logger.info(f"Latest DataFrame Sample:\n{df_tbl_latest_rec.head()}")

    ## Convert Data Types Before Merging
    df_tbl_hist_rec['sum_count_prev'] = pd.to_numeric(df_tbl_hist_rec['sum_count_prev'], errors='coerce')
    df_tbl_hist_rec['avg_count_prev'] = pd.to_numeric(df_tbl_hist_rec['avg_count_prev'], errors='coerce')
    df_tbl_latest_rec['data_dt'] = pd.to_datetime(df_tbl_latest_rec['data_dt'], errors='coerce')
    df_tbl_latest_rec['prfl_run_ts'] = pd.to_datetime(df_tbl_latest_rec['prfl_run_ts'], errors='coerce')

    # ✅ Ensure 'grouped_columns' remains as string
    df_tbl_hist_rec['grouped_columns'] = df_tbl_hist_rec['grouped_columns'].fillna("").astype(str)
    df_tbl_latest_rec['grouped_columns'] = df_tbl_latest_rec['grouped_columns'].fillna("").astype(str)

    ## ✅ Ensure 'weekday' is consistent as Int64
    df_tbl_hist_rec['weekday'] = pd.to_numeric(df_tbl_hist_rec['weekday'], errors='coerce').astype('Int64')
    df_tbl_latest_rec['weekday'] = pd.to_numeric(df_tbl_latest_rec['weekday'], errors='coerce').astype('Int64')

    ## ✅ Rename columns to lowercase to standardize before merging
    df_tbl_hist_rec = df_tbl_hist_rec.rename(columns={col: col.lower() for col in df_tbl_hist_rec.columns})
    df_tbl_latest_rec = df_tbl_latest_rec.rename(columns={col: col.lower() for col in df_tbl_latest_rec.columns})

    ## Logging Data After Fixing Data Types
    self.logger.info(f"Fixed Historical DataFrame Data Types:\n{df_tbl_hist_rec.dtypes}")
    self.logger.info(f"Fixed Latest DataFrame Data Types:\n{df_tbl_latest_rec.dtypes}")

    ## Merging Historical and Latest Records
    self.logger.info('------------------------------------------------------------------')

    join_list = ['prfl_id', 'feature_name', 'grouped_columns', 'weekday']
    if comparison_type == 'DTRAN_MONTHLY':
        join_list.remove('weekday')  # Remove 'weekday' if monthly comparison

    self.logger.info(f'Historical DataFrame Sample After Fixing:\n{df_tbl_hist_rec.head()}')
    self.logger.info(f'Latest DataFrame Sample After Fixing:\n{df_tbl_latest_rec.head()}')

    try:
        df_merge_rec = pd.merge(
            df_tbl_hist_rec,
            df_tbl_latest_rec,
            on=join_list,
            how='right'
        )
        self.logger.info(f'Length of the Merged Records: {len(df_merge_rec)}')
        self.logger.info(f'Merged DataFrame Columns:\n{df_merge_rec.columns}')
        self.logger.info(f'Merged DataFrame Sample:\n{df_merge_rec.head()}')

    except Exception as e:
        self.logger.error(f"Error during merge operation: {e}")
        raise

    self.logger.info('------------------------------------------------------------------')
    return df_merge_rec
