@method_decorator(csrf_exempt, name='dispatch')
class ReportFilterData(FetchDatabaseAsView):
    def post(self, request, *args, **kwargs):
        try:
            if request.content_type == 'application/json':
                data = json.loads(request.body.decode('utf-8'))
            else:
                data = request.POST
            
            print(data)
            
            # Extracting filter parameters
            product_name = data.get('product_name')
            data_lob = data.get('data_lob')
            product_type = data.get('product_type')
            product_area = data.get('product_area')
            business_program = data.get('business_program')

            # Start building base query
            base_query = '''
            SELECT DISTINCT {columns}
            FROM `self.dq_project_id`.dqa_dq_tbls.AUTO_PRFL_RPT_SAMPLE_v
            WHERE 1=1
            '''
            conditions = []

            # If product_name is selected, fetch corresponding lob, product_type, and others dynamically
            if product_name:
                query = base_query.format(columns="data_lob, product_type, product_area, business_program") + " AND product_name = '{}'".format(product_name)
            
            # If data_lob is selected
            elif data_lob:
                query = base_query.format(columns="product_name, product_type, product_area, business_program") + " AND data_lob = '{}'".format(data_lob)

            # If product_type is selected
            elif product_type:
                query = base_query.format(columns="product_name, data_lob, product_area, business_program") + " AND product_type = '{}'".format(product_type)

            # If product_area is selected
            elif product_area:
                query = base_query.format(columns="product_name, data_lob, product_type, business_program") + " AND product_area = '{}'".format(product_area)

            # If business_program is selected
            elif business_program:
                query = base_query.format(columns="product_name, data_lob, product_type, product_area") + " AND business_program = '{}'".format(business_program)

            # If no filter is selected, fetch all
            else:
                query = base_query.format(columns="product_name, data_lob, product_type, product_area, business_program")

            # Query BigQuery and fetch results
            bq_client = bigquery.Client()
            results = bq_client.query(query).result()
            filtered_data = [dict(row.items()) for row in results]

            # Return JSON response with the filtered data
            return JsonResponse({'results': filtered_data}, status=200)
        
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
