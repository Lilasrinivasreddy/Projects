 #Create an opsgenie function
    def send_opsgenie_jira_outlier_alert(self, reference_key: str):
        try:
            report_query = f"""                
                SELECT rpt.*, 
                    mtd.data_lob, mtd.data_dmn,mtd.data_sub_dmn, mtd.db_name, mtd.src_tbl,mtd.meas_name,
                    mtd.data_src, mtd.dq_pillar, mtd.opsgenie_api_key, mtd.is_opsgenie_flg,mtd.jira_assignee
                FROM {config.dqaas_profile_mtd} mtd 
                INNER JOIN 
                (SELECT * FROM {config.dqaas_profile_rpt} 
                WHERE rpt_ref_key = '{reference_key}') rpt
                ON mtd.prfl_id = rpt.prfl_id
                WHERE upper(mtd.prfl_type) = 'CUSTOM_RULES'
            """
            self.logger.info(f"Opsgenie Info Query: {report_query}")

            report_df = self.utils.run_bq_sql(
                bq_auth=config.dq_gcp_auth_payload,
                select_query=report_query
            )
            
            if len(report_df) == 0:
                self.logger.warning("No records found for Opsgenie alert")
                return
            
            self.logger.info(f"Report DataFrame for Opsgenie Alerts: {report_df}")

            # self.logger.info(f"Report DataFrame head: {report_df.head()}")
            # self.logger.info(f"Report DataFrame head: {report_df.columns}")
            # self.logger.info(f"Report DataFrame head: {report_df.dtypes}")
            #report_df.reset_index(drop=True)

            for idx in report_df.index:
                alert_type = None
                priority = None

                # print(f"idx: {idx}")
                # print(report_df.loc[idx,])
                # print(report_df.loc[idx, 'dq_ind'])

                # Fetch records where dq_status = 'LOW' OR sigma_value = 'outlier'
                if report_df.loc[idx, 'dq_ind'].upper() == "LOW" and report_df.loc[idx, 'sigma_value'].lower() == "outlier":
                    alert_type = 'custom_profile_both_dq_status and sigma_value failed'
                    priority = "P3"  

                elif report_df.loc[idx, 'sigma_value'].lower() == "outlier":
                    alert_type = 'custom_profile_outlier'
                    priority = "P3" 
                elif report_df.loc[idx, 'dq_ind'].upper() == "LOW":
                    alert_type = 'custom_profile_dq_status failed'
                    priority = "P3"
                else:
                    continue
                
                env = config.get_config_values('environment', 'env')
                data_src = {report_df.loc[idx,'data_src']}
                data_sub_dmn = {report_df.loc[idx,'data_sub_dmn']}
                dq_pillar = {report_df.loc[idx,'dq_pillar']}
                db_name = {report_df.loc[idx,'db_name']}
                src_tbl = report_df.loc[idx,'src_tbl']

                if report_df.loc[idx, 'is_opsgenie_flg'].upper() == "Y":
                    profile_type = "custom"
                    api_key = report_df.loc[idx, 'opsgenie_api_key']           
                    # Use default API key
                    if api_key in config.EMPTY_STR_LIST or (isinstance(api_key, float) and math.isnan(api_key)):
                        api_key = config.get_config_values('opsgenie', 'api_key')

                    renamed_report_df = report_df.rename(columns={col: str(col).upper() for col in report_df.columns.tolist()})
                    gcp_http_proxy_url = config.GCP_HTTP_PROXY_URL
                
                    opsgenie_client = Alert(api_key=api_key, proxy=gcp_http_proxy_url)
                    
                    # Send Opsgenie alert
                    response, request_id, message = opsgenie_client.create_opsgenie_alert(
                        renamed_report_df, 0, alert_type, priority, env, profile_type
                    )

                    self.logger.info(f"Opsgenie response code: {response}")
                    self.logger.info(f"Opsgenie alert sent successfully for {alert_type}")

                elif report_df.loc[idx, 'jira_assignee'] is not None: 
                    try:
                        JIRA_ASSIGNEE = report_df.loc[idx, 'jira_assignee']
                        label = "DQaaS"
                        summary = f"LensX | {env} | {data_src} | {data_sub_dmn} | {dq_pillar} | {db_name} | Table: {src_tbl}" | {alert_type}
                        description = f"DQ Issue detected for Table {src_tbl} on Run Date {report_df.loc[idx,'prfl_run_ts']}."
                        jira_client = Jira_ticket()
                        ticket_id = jira_client.create_jira_ticket(JIRA_ASSIGNEE, summary, description, label)
                        self.logger.info(f"Jira ticket created: {ticket_id}")
                    except Exception as err:
                        self.logger.error(f"Error while creating JIRA ticket: {err}")
        
        except Exception as err:
            self.logger.error(f"Error occurred while sending Opsgenie alert. Error: {err}")

