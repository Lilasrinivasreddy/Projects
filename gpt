def send_opsgenie_jira_alert(self, reference_key: str):
    try:
        report_query = f"""                
            SELECT rpt.*, 
                mtd.data_lob, mtd.data_sub_dmn, mtd.database_name, mtd.table_name, 
                mtd.data_src, mtd.dq_pillar, mtd.opsgenie_api, mtd.opsgenie_flag, mtd.jira_assignee
            FROM {config.dqaas_mtd} mtd 
            INNER JOIN (
                SELECT * FROM {config.dqaas_profile_rpt} 
                WHERE rpt_ref_key = '{reference_key}' 
            ) rpt
            ON mtd.profile_id = rpt.profile_id
            WHERE UPPER(mtd.profile_type) = 'RULE_CUSTOM'
        """
        self.logger.info(f"Opsgenie Info Query: {report_query}")

        report_df = self.utils.run_bq_sql(
            bq_auth=config.dq_gcp_auth_payload,
            select_query=report_query
        )

        if len(report_df) == 0:
            raise Exception("No records found for Opsgenie/JIRA alert")

        # Normalize columns to uppercase for consistent reference
        report_df.columns = [col.upper() for col in report_df.columns]

        for idx in report_df.index:
            dq_status = str(report_df.loc[idx, 'DQ_STATUS']).upper()
            sigma_value = str(report_df.loc[idx, 'SIGMA_VALUE']).lower() if 'SIGMA_VALUE' in report_df.columns else ""
            opsgenie_flag = str(report_df.loc[idx, 'OPSGENIE_FLAG']).upper()
            jira_assignee = report_df.loc[idx, 'JIRA_ASSIGNEE']

            alert_type = None
            priority = "P3"

            # Define alert types based on conditions
            if dq_status == "LOW" and sigma_value == "outlier":
                alert_type = 'custom_profile_both_dq_status and sigma_value failed'
            elif sigma_value == "outlier":
                alert_type = 'custom_profile_outlier'
            elif dq_status == "LOW":
                alert_type = 'custom_profile_dq_status failed'

            # Skip if no alert is needed
            if not alert_type:
                continue

            env = config.get_config_values('environment', 'env')
            profile_type = "custom"
            table_name = report_df.loc[idx, 'TABLE_NAME']
            db_name = report_df.loc[idx, 'DATABASE_NAME']
            data_src = report_df.loc[idx, 'DATA_SRC']
            data_sub_dmn = report_df.loc[idx, 'DATA_SUB_DMN']
            dq_pillar = report_df.loc[idx, 'DQ_PILLAR']

            # Send Opsgenie Alert
            if opsgenie_flag == "Y":
                api_key = report_df.loc[idx, 'OPSGENIE_API']
                if api_key in config.EMPTY_STR_LIST or (isinstance(api_key, float) and math.isnan(api_key)):
                    api_key = config.get_config_values('opsgenie', 'api_key')

                gcp_http_proxy_url = config.GCP_HTTP_PROXY_URL
                opsgenie_client = Alert(api_key=api_key, proxy=gcp_http_proxy_url)

                renamed_df = report_df.rename(columns={col: col.upper() for col in report_df.columns})
                response, request_id, message = opsgenie_client.create_opsgenie_alert(
                    renamed_df, 0, alert_type, priority, env, profile_type
                )
                self.logger.info(f"Opsgenie response code: {response}")
                self.logger.info(f"Opsgenie alert sent successfully for {alert_type}")

            # Send JIRA Ticket
            elif jira_assignee:
                try:
                    label = "DQaaS"
                    summary = f"LensX | {env} | {data_src} | {data_sub_dmn} | {dq_pillar} | {db_name} | Table: {table_name} | {alert_type}"
                    description = f"DQ Issue detected for Table {table_name} on Run Date {report_df.loc[idx, 'PRFL_RUN_DT']}."
                    jira_client = Jira_ticket()
                    ticket_id = jira_client.create_jira_ticket(jira_assignee, summary, description, label)
                    self.logger.info(f"Jira ticket created: {ticket_id}")
                except Exception as err:
                    self.logger.error(f"Error while creating JIRA ticket: {err}")

    except Exception as err:
        self.logger.error(f"Error occurred while sending Opsgenie/JIRA alert. Error: {err}")