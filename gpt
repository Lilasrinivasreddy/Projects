def load_to_report_results(self, df_report_result: pd.DataFrame, reference_key: str):
    try:
        ## BigQuery Client Connection
        dbclient, db_creds = self.utils.bigquery_client(
            auth=config.dq_gcp_auth_payload
        )

        # Remove duplicate columns
        df_report_result = df_report_result.loc[:, ~df_report_result.columns.duplicated()]
    
        df_report_result["rpt_ref_key"] = reference_key

        # Ensure 'consistecy_score' is present (Fixing the Error)
        if 'consistecy_score' not in df_report_result.columns:
            self.logger.warning("Column 'consistecy_score' missing, adding it with default value 0.")
            df_report_result['consistecy_score'] = 0.0  # Default value

        # Convert Numeric Columns to Correct Data Types
        numeric_columns = [
            "avg_count_prev", "variance_value", "std_dev_value", "sigma_2_value",
            "pct_change", "count_curr", "dq_score", "min_thresh_value", "max_thresh_value", "consistecy_score"
        ]
        for col in numeric_columns:
            if col in df_report_result.columns:
                df_report_result[col] = pd.to_numeric(df_report_result[col], errors='coerce')

        # Convert Date/Datetime Columns
        datetime_columns = ["data_dt", "insert_date", "prfl_run_ts"]
        for col in datetime_columns:
            if col in df_report_result.columns:
                df_report_result[col] = pd.to_datetime(df_report_result[col], errors='coerce')

        # Convert Integer Columns
        int_columns = ["weekday", "prfl_id", "rpt_seq_num"]
        for col in int_columns:
            if col in df_report_result.columns:
                df_report_result[col] = df_report_result[col].astype(pd.Int64Dtype(), errors='ignore')

        self.logger.info("--------Data Types After Fixing:\n%s", df_report_result.dtypes)

        # Validate Data Before Inserting
        if df_report_result.empty:
            self.logger.warning("No records to insert into BigQuery! Skipping load_to_report_results.")
            return
        
        # Log if there are NaN values after conversion
        if df_report_result[numeric_columns].isna().sum().sum() > 0:
            self.logger.warning("Some numeric values couldn't be converted. Check for missing data.")

        self.logger.info(f"Data Types Fixed Before BigQuery Load: \n{df_report_result.dtypes}")

        df_report_result = df_report_result.rename(columns={col: str(col).lower() for col in df_report_result.columns.tolist()})

        self.logger.info(f"DataFrame before BigQuery Load: \n{df_report_result.head()}")

        ## Loading Table Level Report
        self.utils.load_result_to_bq_report_table(
            dq_bq_client=dbclient,
            dq_credentials=db_creds,
            dq_report_table_name=config.dqaas_profile_rpt,
            df_load_data=df_report_result,
            seq_name='rpt_seq_num',
            column_details=self.custom_profile_report_columns
        )
        
    except Exception as err:
        self.logger.error(f"Error in load_to_report_results: {err}")








self.logger.info(f"Columns before BigQuery Load: {df_report_result.columns.tolist()}")
