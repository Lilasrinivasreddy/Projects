self.utils.read_metadata_table()
try:
    self.logger.info(f'Sub Domain: {sub_domain}, Initiating Profiling')

    df_tbl_list = df_val[df_val['DATA_SUB_DMN'] == sub_domain]
    df_tbl_list = df_tbl_list.reset_index(drop=True)

    self.logger.info(f'Records Count: {len(df_tbl_list)}')

    ## Initiating Profile Engine
    AutoProfileEngine(data_src=data_src).call_auto_profile_engine(df_input=df_tbl_list, run_type=self.run_type)

    # ✅ Log execution completion in control table
    self.utils.log_execution_status(
        profile_id=row["profile_id"],
        table_name=row["table_name"],
        run_ts=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        run_status="C",  # "C" means completed
        profile_date=datetime.now().strftime("%Y-%m-%d"),
        comments="Auto Profiling Completed Successfully"
    )

    # ✅ Log job monitoring details
    user_id = self.utils.get_user_id()
    self.utils.log_monitor_table(
        job_id=row["profile_id"],
        job_name="Auto Profiling",
        job_start_ts=start_time,
        job_end_ts=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        entry_ts=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        user_id=user_id,
        step_code="COMP",
        comments="Auto Profiling Completed"
    )

except Exception as err:
    self.logger.error(f"Error While Profiling the Table of Sub Domain({sub_domain}). Error: {err}")

    # ✅ Log failure in control table
    self.utils.log_execution_status(
        profile_id=row["profile_id"],
        table_name=row["table_name"],
        run_ts=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        run_status="F",  # "F" means failed
        profile_date=datetime.now().strftime("%Y-%m-%d"),
        comments=f"Auto Profiling Failed: {err}"
    )
---------------------------

self.utils.read_metadata_table()
for profile_type, df in profile_type_dfs.items(): 
    try:           
        self.call_respective_profile_engine(profile_type, df, self.data_src)
        
        for index, row in df.iterrows():
            # ✅ Update control table status after profiling
            self.utils.log_execution_status(
                profile_id=row["profile_id"],
                table_name=row["table_name"],
                run_ts=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                run_status="C",  # "C" means completed
                profile_date=datetime.now().strftime("%Y-%m-%d"),
                comments="Profiling Completed Successfully"
            )

            # ✅ Log job monitoring details
            user_id = self.utils.get_user_id()
            self.utils.log_monitor_table(
                job_id=row["profile_id"],
                job_name="Profiling Process",
                job_start_ts=start_time,
                job_end_ts=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                entry_ts=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                user_id=user_id,
                step_code="COMP",
                comments="Profiling Process Completed"
            )

    except Exception as e: 
        self.logger.info(f"Error processing profile type: {profile_type} with error: {str(e)}")           
