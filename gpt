import os
import logging
import pandas as pd
import teradatasql
from google.cloud import bigquery
import google.auth
import pandas_gbq
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View

# ✅ Teradata Configuration
dq_td_config = {
    "hostname": "TDDP.TDC.VZWCORP.COM",
    "uid": "IDQPRDLD",
    "pwd": "Newpass#969",
    "dbname": "idq_prd_tbls"
}

# ✅ BigQuery Configuration
dq_config = {
    "sa_json_file_dtls": os.path.join(os.path.dirname(__file__), "sa-pr-izcv-app-idmcdo-0-oidc-27472-config.json"),
    "conn_project_id": "vz-it-pr-izcv-idmcdo-0",
    "bq_table_name": "your_project.your_dataset.teradata_results"  # ✅ Replace with actual BQ table
}

# ✅ Initialize Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ✅ Teradata Client
def teradata_client():
    try:
        conn = teradatasql.connect(
            host=dq_td_config["hostname"],
            user=dq_td_config["uid"],
            password=dq_td_config["pwd"],
            database=dq_td_config["dbname"]
        )
        print("✅ Teradata connection successful!")
        return conn
    except Exception as err:
        print(f"❌ Error connecting to Teradata: {err}")
        return None

# ✅ BigQuery Client
def bigquery_client():
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = dq_config["sa_json_file_dtls"]
    os.environ['GOOGLE_CLOUD_PROJECT'] = dq_config["conn_project_id"]
    credentials, _ = google.auth.default()
    return bigquery.Client(credentials=credentials, project=dq_config["conn_project_id"]), credentials

# ✅ Load Data into BigQuery
def load_result_to_bq(df_load_data):
    try:
        if df_load_data.empty:
            print(f"⚠️ No data to insert into BigQuery for table {dq_config['bq_table_name']}")
            return

        print("📌 DataFrame before inserting into BigQuery:")
        print(df_load_data.head())

        pandas_gbq.to_gbq(
            dataframe=df_load_data,
            destination_table=dq_config["bq_table_name"],
            if_exists="append",
            project_id=dq_config["conn_project_id"],
        )
        print(f"✅ Successfully loaded {len(df_load_data)} rows into {dq_config['bq_table_name']}")
    except Exception as err:
        print(f"❌ Error loading results into BigQuery: {err}")

# ✅ Process SQL File Upload and Execute Queries
@method_decorator(csrf_exempt, name="dispatch")
class ExecuteHistorySQL(View):
    def post(self, request):
        try:
            print(f"📂 Received FILES: {request.FILES}")

            if "file" not in request.FILES:
                print("❌ No file uploaded.")
                return JsonResponse({"status": "failure", "message": "No file uploaded."}, status=400)

            file = request.FILES["file"]
            file_content = file.read().decode("utf-8").strip()
            print(f"📄 File content:\n{file_content}")

            queries = file_content.split(";")
            results = {}

            for query in queries:
                query = query.strip()
                if not query:
                    continue

                print(f"📌 Executing Query:\n{query}")

                try:
                    conn = teradata_client()
                    if conn is None:
                        return JsonResponse({"status": "failure", "message": "Teradata connection failed."}, status=500)

                    cursor = conn.cursor()

                    # ✅ If INSERT, extract only the SELECT part
                    if query.lower().startswith("insert"):
                        print("🔄 Extracting SELECT query from INSERT statement...")
                        select_query = query.split("SELECT", 1)[1].strip()
                        select_query = "SELECT " + select_query
                        print(f"📌 Extracted SELECT Query:\n{select_query}")

                        cursor.execute(select_query)
                        results_list = cursor.fetchall()

                        if not results_list:
                            print(f"⚠️ Query returned no data: {select_query}")
                            continue  # Skip processing if no results

                        df = pd.DataFrame(results_list, columns=[desc[0] for desc in cursor.description])
                        print("📌 DataFrame from Teradata:")
                        print(df.head())

                        # ✅ Load results to BigQuery
                        load_result_to_bq(df)

                        results[query[:30]] = f"TD to GCP Query executed successfully. {len(df)} rows inserted."

                    else:
                        print(f"⚠️ Skipping non-SELECT query: {query}")

                    cursor.close()
                    conn.close()

                except Exception as e:
                    print(f"❌ Query execution failed: {query}\nError: {e}")
                    return JsonResponse({"status": "failure", "message": str(e)}, status=500)

            return JsonResponse({"status": "success", "results": results}, status=200)

        except Exception as e:
            print(f"❌ Error processing request: {e}")
            return JsonResponse({"status": "failure", "message": str(e)}, status=500)




INSERT INTO vz-it-np-izcv-dev-idmcdo-0.dga_dq_tbls.dqaas_profile_rpt
(
    rpt_seq_num, prfl_id, prfl_type, dq_pillar, src_tbl, meas_name,
    data_dt, feature_name, grouped_columns, count_curr, prfl_run_ts, weekday
)
SELECT
    1000001 AS rpt_seq_num,
    1397 AS prfl_id,
    'CUSTOM_RULES' AS prfl_type,
    'Consistency' AS dq_pillar,
    'base_address_all_acct_hist' AS src_tbl,
    'LAST_UPDT_TS' AS meas_name,
    CAST(rpt_dt AS DATE) AS data_dt,
    'Tier1 Models' AS feature_name,
    NULL AS grouped_columns,
    COUNT(*) AS count_curr,
    CURRENT_TIMESTAMP AS prfl_run_ts,
    EXTRACT(DAYOFWEEK FROM rpt_dt) AS weekday
FROM vz-it-pr-gk1v-cwlspr-0.vzw_uda_prd_tbls.base_address_all_acct_hist
WHERE CAST(rpt_dt AS DATE) >= CURRENT_DATE - 90
GROUP BY 1,2,3,4,5,6,7,8,11,12;
