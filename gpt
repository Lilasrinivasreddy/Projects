def request_custom_profile_engine(self, logger: logging, df_val: pd.DataFrame):
    # Fetch and format environment dynamically from the config.ini file
    environment = self.config.get('environment', 'env').capitalize()

    df_val = df_val.rename(columns={col: str(col).lower() for col in df_val.columns.tolist()})
    df_val["comparison_type"] = df_val["comparison_type"].fillna("WEEKDAYS")
    df_val["run_frequency"] = df_val["run_frequency"].fillna("N")
    dfGroupList = df_val[["data_sub_dmn", "comparison_type", "run_frequency"]].drop_duplicates()
    process_date = "current_date-1"
    business_date = "current_date-1"
    cmObj = CustomeMetrics()
    
    logger.info(f'Request for Rule - Custom Profiling Initiated...\nTotal Records: {len(df_val)}\n{dfGroupList}')

    # Initialize email subject for the start of the process
    mail_subject_msg = f"LensX|{environment}|Custom_Profiling_Started|DQ2.0|{datetime.now().strftime('%Y-%m-%d %H:%M:%S %Z')}"

    # Send email notification for the start of profiling
    try:
        self.utils.email.send_common_message(
            email_template_filepath=self.config['dir']['template_dir'] + 'dq_common_message.html',
            mail_subject=mail_subject_msg,
            message="DQ-2.0 custom profiling has started",
            receipents_email_id=self.config['sql_rule_profile']['default_summary_mail_group']
        )
        logger.info(f'Start email sent with subject: {mail_subject_msg}')
    except Exception as email_err:
        logger.error(f"Error while sending start notification email: {email_err}")

    logger.info("---------------------------------------------------------------------")
    for row in dfGroupList.itertuples():
        try:
            logger.info(f'Sub Domain: {row.data_sub_dmn}, Comparison : {row.comparison_type}, Hourly: {row.run_frequency} Initiating Profiling')
            
            df_tbl_list = df_val[
                (df_val["data_sub_dmn"] == row.data_sub_dmn) & 
                (df_val["comparison_type"] == row.comparison_type) &
                (df_val["run_frequency"] == row.run_frequency)
            ]
            df_tbl_list = df_tbl_list.reset_index(drop=True)
            
            logger.info(f'Records Count: {len(df_tbl_list)}')
            
            # Initiating Profile Engine
            cmObj.main_metrics_execution(
                df_mtd=df_tbl_list,
                sub_domain=row.data_sub_dmn,
                start_date=business_date,
                end_date=process_date
            )
            
            logger.info(f'Sub Domain: {row.data_sub_dmn}, Comparison : {row.comparison_type} - Rule - Custom Profiling Completed')
        except Exception as err:
            logger.error(f"""Error While Profiling the Table of Sub Domain({row.data_sub_dmn}, Comparison : {row.comparison_type}) and Hourly: {row.run_frequency}. Error: {err}""")
        
        logger.info("---------------------------------------------------------------------")

    # Initialize email subject for the completion of the process
    mail_subject_msg = f"LensX|{environment}|Custom_Profiling_Completed|DQ2.0|{datetime.now().strftime('%Y-%m-%d %H:%M:%S %Z')}"

    # Send email notification for the completion of profiling
    try:
        self.utils.email.send_common_message(
            email_template_filepath=self.config['dir']['template_dir'] + 'dq_common_message.html',
            mail_subject=mail_subject_msg,
            message="DQ-2.0 custom profiling has completed successfully",
            receipents_email_id=self.config['sql_rule_profile']['default_summary_mail_group']
        )
        logger.info(f'Completion email sent with subject: {mail_subject_msg}')
    except Exception as email_err:
        logger.error(f"Error while sending completion notification email: {email_err}")

    logger.info(f'Request for Custom Profiling got Completed...')
    logger.info("---------------------------------------------------------------------")

