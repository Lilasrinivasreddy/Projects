with 
dof_entity_relation_lineage_meta_v AS
(SELECT
 DISTINCT relationship_id,project_name,case when sub_process='soi_egress' then concat('cfi_send_soi_egress_',process_name) else process_name end as process_name,source_type,target_type,sub_process,application_name,step_id,env_name,
  TRIM(REPLACE(process_source, '\n','')) AS process_source,
  TRIM(REPLACE(process_target, '\n','')) AS process_target
FROM (
  SELECT
    lm.* EXCEPT(process_source,
      process_target),
    SPLIT(process_source, ',') AS nested_process_source,
    SPLIT(process_target, ',') AS nested_process_target
  FROM
    `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_entity_relation_meta` lm
  INNER JOIN
    `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_process_meta` pm
  ON
    lm.process_name=pm.process_name
  WHERE
    pm.is_active='Y'
    AND (TRIM(lm.process_target) <> ''
      OR TRIM(lm.process_source)<>'')
    AND (lm.process_target IS NOT NULL
      OR lm.process_source IS NOT NULL)
  UNION ALL
  SELECT
    lm.* EXCEPT(process_source,
      process_target),
    SPLIT(process_source, ',') AS nested_process_source,
    SPLIT(process_target, ',') AS nested_process_target
  FROM
    `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_entity_relation_meta` lm
  INNER JOIN
    `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_realtime_process_meta` pm
  ON
    lm.process_name=pm.process_name
  WHERE
    pm.is_active='Y'
    AND (TRIM(lm.process_target) <> ''
      OR TRIM(lm.process_source)<>'')
    AND (lm.process_target IS NOT NULL
      OR lm.process_source IS NOT NULL) )
LEFT JOIN
  UNNEST(nested_process_source) AS process_source
LEFT JOIN
  UNNEST(nested_process_target) AS process_target),

----------------------------------------------------------------  
dof_process_monitor_lineage_latest_rpt_v AS
(SELECT
  *EXCEPT(failed_instance_count, success_instance_count, pending_instance_count,others_instance_count),
  MAX(pending_instance_count) OVER (PARTITION BY program_name, project_name, process_name, process_date, process_id) AS pending_instance_count,
  MAX(success_instance_count) OVER (PARTITION BY program_name, project_name, process_name, process_date, process_id) AS success_instance_count,
  MAX(failed_instance_count) OVER (PARTITION BY program_name, project_name, process_name, process_date, process_id) AS failed_instance_count,
  MAX(others_instance_count) OVER (PARTITION BY program_name, project_name, process_name, process_date, process_id) AS others_instance_count
FROM
(SELECT
  DISTINCT master.step_id,process_id,
  master.program_name,
  master.project_name,
  master.process_name,
  --case when master.sub_process in ('soi_egress') then concat('cfi_send_soi_egress_',master.process_name) else master.process_name end as process_name,
  tool_name,
  master.sub_process,
  CASE
    WHEN process_status='FAILURE' THEN 'FAILED'
  ELSE
  process_status
END
  AS process_status,
  case
    when lower(overall_process_status) = 'in progress' then 'PROGRESS'
    when lower(overall_process_status) = 'completed' then 'SUCCESS'
    when lower(overall_process_status) = 'pending' then 'Pending'
    when lower(overall_process_status) = 'failed' then 'FAILURE'
  end as overall_process_status,
  master.sla_time,
  sla_met,
  COALESCE(nullif(master.source_name,''), meta.process_source) AS source_name,
  COALESCE(nullif(master.target_name,''), meta.process_target) AS target_name,
  COALESCE(nullif(master.source_type,''), meta.source_type) AS source_type,
  COALESCE(nullif(master.target_type,''), meta.target_type) AS target_type,
  master.process_date,
  schedule_date,
  schedule_time,
  frequency,
  master.start_time,
  end_time,
  critical,
  project_status,
  critical_project_status,
  process_poc,
  downstream_poc,
  upstream_poc,
  source_id,
  source_count,
  target_id,
  target_count,
  insert_timestamp,
  gcp_project,
  threshold_unit,
  threshold_up,
  threshold_low,
  threshold_up_value,
  threshold_low_value,
  size_alert,
  master.application_name,
  is_valid,
  monitor_date,
  expected_datetime,
  trace_id,
  COUNT(DISTINCT schedule_time) OVER (PARTITION BY master.program_name, master.project_name, master.process_name, master.process_date) AS total_instance_count,
  CASE
    WHEN process_status IN ('FAILURE', 'FAILED') THEN IFNULL(COUNT(DISTINCT schedule_time) OVER (PARTITION BY master.process_date, master.program_name, master.process_status, master.process_id), 0)
  ELSE
  0
END
  AS failed_instance_count,
  CASE
    WHEN UPPER(process_status) IN ('SUCCESS') THEN IFNULL(COUNT(DISTINCT schedule_time) OVER (PARTITION BY master.process_date, master.program_name, master.process_status, master.process_id), 0)
  ELSE
  0
END
  AS success_instance_count,
  CASE
    WHEN UPPER(process_status) IN ('PENDING') THEN IFNULL(COUNT(DISTINCT schedule_time) OVER (PARTITION BY master.process_date, master.program_name, master.process_status, master.process_id), 0)
  ELSE
  0
END
  AS pending_instance_count,
  CASE
    WHEN UPPER(process_status) IN ('WAIT','HELD','PROGRESS') THEN IFNULL(COUNT(DISTINCT schedule_time) OVER (PARTITION BY master.process_date, master.program_name, master.process_status, master.process_id), 0)
  ELSE
  0
END
  AS others_instance_count
FROM (
  SELECT
    *
  FROM (
  SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY process_id, process_date, sla_time, schedule_time ORDER BY start_time DESC) AS rn
  FROM
    `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_process_monitor_rpt`
    where is_valid = true
) where rn=1) as master
LEFT JOIN
  `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_entity_relation_lineage_meta_v` AS meta
ON
  master.project_name=meta.project_name
  AND master.sub_process=meta.sub_process
  AND master.process_name=meta.process_name))

---------------------------------------------------------------------------------
--select distinct process_name, sub_process from dof_entity_relation_lineage_meta_v where application_name = 'DE' and project_name = 'SOI VZCARD_WLY' ;
--select distinct process_name, sub_process from dof_process_monitor_lineage_latest_rpt_v where application_name = 'DE' and project_name = 'SOI VZCARD_WLY';
 

SELECT
  COALESCE(map.mapped_program_name, process_report.program_name) AS project_name,
  process_report.process_id,
  week_date AS process_date,
  process_report.sub_process AS subprocess_name,
  process_report.process_poc,
  /*ARRAY_AGG(DISTINCT IFNULL(sla_time, '')) AS sla_history,*/
  process_report.frequency,
  run_day,
  /*ARRAY_AGG(DISTINCT IFNULL(process_report.schedule_time, '')) AS run_hour_history,*/
  is_critical,
  scheduler_name,
  COALESCE(notify_failure, 'Y') AS notify_fails,
  failure_notification_email_list,
  COALESCE(notify_success, 'N') AS notify_success,
  success_notification_email_list,
  process_meta.is_active,
  process_report.application_name,
  create_dt,
  process_seq_num,
  source_environment,
  meta.env_name,
  source_servername,
  sub_process_seq_num,
  target_environment,
  target_servername,
  meta.process_source AS source,
  meta.process_target AS target,
  process_report.source_type,
  process_report.target_type,
  process_report.process_name,
  COALESCE(map.mapped_program_name, process_report.program_name) AS program_name,
  process_report.monitor_date,
  IF
  (process_report.target_count = 0, NULL, process_report.target_count) AS target_count,
  file_detail.file_arrival_status as source_file_status,
  process_meta.is_mandatory as mandatory_process,
   --file_detail.is_mandatory as mandatory_file,
   null as  mandatory_file,
  ARRAY_AGG( IFNULL(CAST(expected_datetime AS STRING format 'yyyy-mm-dd HH24:mi:SS'), '') order by expected_datetime) AS sla_history,
  ARRAY_AGG( IFNULL( CAST( process_report.start_time AS string format 'yyyy-mm-dd HH24:mi:SS'),'') order by expected_datetime) AS run_hour_history,
  ARRAY_AGG( IFNULL(process_report.process_status, '') order by expected_datetime) AS run_status_history,
  ARRAY_AGG( IFNULL(sla_met, '') order by expected_datetime) AS sla_met_history,
  /*process_report.program_name,*/ /*tag_value AS tag,*/
  ARRAY_AGG(DISTINCT (0)) AS trace_id_history,
  ARRAY_AGG( (process_meta.source) order by expected_datetime) as source_history,
  ARRAY_AGG( (process_meta.target) order by expected_datetime) as target_history,
  /*ARRAY_AGG(IFNULL(CAST(process_report.end_time AS string),'')) AS end_time_history,*/
  ARRAY_AGG( IFNULL( CAST( process_report.end_time AS string format 'yyyy-mm-dd HH24:mi:SS'),'') order by expected_datetime) AS end_time_history,
  ARRAY_AGG( process_report.process_date order by expected_datetime) AS process_date_history,
  /*CAST(COALESCE(NULL,1) as STRING) as total_instance_count,*/ CAST((MAX(success_instance_count) + MAX(failed_instance_count)+ MAX(pending_instance_count)+MAX(others_instance_count)) AS string) AS total_instance_count,
  CAST(MAX(success_instance_count) AS string) AS success_instance_count,
  CAST(MAX(failed_instance_count) AS string) AS failed_instance_count,
  CAST(MAX(pending_instance_count) AS string) AS pending_instance_count,
  CAST(MAX(others_instance_count) AS string) AS others_instance_count
FROM
  dof_entity_relation_lineage_meta_v AS meta
INNER JOIN (
  SELECT
    V.*,
    date AS week_date
  FROM (
    SELECT
      *
    FROM
      dof_process_monitor_lineage_latest_rpt_v
    WHERE
      process_date > current_date() - 60 and LOWER(frequency) IN ('monthly',
        'weekly')) V
  INNER JOIN (SELECT date,EXTRACT(YEAR FROM date) AS year,EXTRACT(week FROM date) AS week, EXTRACT(Month FROM date) AS Month FROM UNNEST(GENERATE_DATE_ARRAY(current_date-60, current_Date)) AS date ) A /* update to identify common weeks that are present in two months */
  ON
    EXTRACT(YEAR
    FROM
      process_date)=year
    AND
    CASE
      WHEN LOWER(V.frequency) IN ('weekly') THEN EXTRACT(week FROM process_date)= week
     WHEN LOWER(V.frequency) IN ('monthly') THEN EXTRACT(MONTH FROM process_date) = Month
  END
    /* second weekly condition to join successive month in the same week */
  WHERE
    process_date IS NOT NULL
  ORDER BY
    week_date ) AS process_report
ON
  process_report.project_name=meta.project_name
  AND process_report.sub_process=meta.sub_process
  AND process_report.process_name =meta.process_name
  AND UPPER(process_report.frequency) IN ('MONTHLY', 'WEEKLY') /*select weekly and monthly records*/
INNER JOIN
  `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_process_meta` AS process_meta
ON
  process_meta.subprocess_name=process_report.sub_process
    AND case when process_meta.subprocess_name='soi_egress' then concat('cfi_send_soi_egress_',process_meta.process_name) else process_meta.process_name end  =process_report.process_name  
  --AND process_meta.process_name=process_report.process_name 
    AND process_meta.step_id =process_report.step_id
    AND process_meta.process_id =process_report.process_id 
LEFT JOIN
(select distinct concat(file_meta.file_path,file_meta.file_name) as qualified_file_name, file_report.file_pattern, file_report.file_arrival_status, file_report.process_date from `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_file_meta` file_meta INNER JOIN `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_files_monitor_rpt` file_report
on file_meta.file_id = file_report.file_id and file_report.is_valid = true
) file_detail
ON process_meta.source = file_detail.qualified_file_name and process_report.process_date = file_detail.process_date and lower(process_meta.source_type) = 'file'
LEFT JOIN
  `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_process_alert_notification_meta` AS alert_meta
ON
  process_meta.application_name=alert_meta.application_name
  AND process_meta.program_name=alert_meta.program_name
  AND process_meta.platform_name=alert_meta.platform_name
  AND process_meta.env_name=alert_meta.env_name
  AND process_meta.process_name=alert_meta.process_name
LEFT JOIN
  `vz-it-pr-hgrv-aidedo-0.aid_epdo_prd_tbls_nogsam_v.dof_program_name_mapping_v` map
ON
  LOWER(process_report.program_name) = LOWER(map.meta_program_name)
WHERE
  process_report.source_type IS NOT NULL
  AND process_report.target_type IS NOT NULL
  AND process_report.process_status IS NOT NULL
  AND is_valid IS TRUE
  AND (UPPER(process_meta.is_active) = 'Y'
    OR process_meta.is_active IS NULL)
  AND sla_time IS NOT NULL 
  and  meta.application_name = 'DE' and meta.project_name = 'SOI VZCARD_WLY'
GROUP BY
  1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34

******************************************************************************************************************************************************************************************
***************************************************************************************************************************************************
CREATE or REPLACE TABLE dataobservability_tbls.dof_lineage_diagram_etl partition by process_date as
SELECT tbl.*, tags.tag_value as tag,
  dq.`TBL_COMPLETENESS` AS tbl_completeness,
  dq.`TBL_TIMELINESS` AS tbl_timeliness,
  dq.`TBL_UNIQUENESS` AS tbl_uniqueness
   from (
SELECT
  COALESCE(map.mapped_program_name, process_report.program_name) AS project_name,
  process_report.process_id,
  process_report.process_date,
  process_report.sub_process AS subprocess_name,
  process_report.process_poc,
  /*ARRAY_AGG(DISTINCT IFNULL(sla_time, '')) AS sla_history,*/
  process_report.frequency,
  run_day,
  /*ARRAY_AGG(DISTINCT IFNULL(process_report.schedule_time, '')) AS run_hour_history,*/
  is_critical,
  scheduler_name,
  COALESCE(notify_failure, 'Y') AS notify_fails,
  failure_notification_email_list,
  COALESCE(notify_success, 'N') AS notify_success,
  success_notification_email_list,
  process_meta.is_active,
  process_report.application_name,
  create_dt,
  process_seq_num,
  source_environment,
  meta.env_name,
  source_servername,
  sub_process_seq_num,
  target_environment,
  target_servername,
  meta.process_source AS source,
  meta.process_target AS target,
  process_report.source_type,
  process_report.target_type,
  process_report.process_name,
  COALESCE(map.mapped_program_name, process_report.program_name) AS program_name,
  process_report.monitor_date,
  IF
  (process_report.target_count = 0, NULL, process_report.target_count) AS target_count,
  file_detail.file_arrival_status as source_file_status,
  process_meta.is_mandatory as mandatory_process,
  file_detail.is_mandatory as mandatory_file,
  ARRAY_AGG(DISTINCT IFNULL(CAST(expected_datetime AS STRING format 'yyyy-mm-dd HH24:MI:SS'), '')) AS sla_history,
  ARRAY_AGG( IFNULL( CAST( process_report.start_time AS string format 'yyyy-mm-dd HH24:MI:SS'),'')) AS run_hour_history,
  ARRAY_AGG(DISTINCT IFNULL(process_report.process_status, '')) AS run_status_history,
  ARRAY_AGG(DISTINCT IFNULL(sla_met, '')) AS sla_met_history,
  /*process_report.program_name,*/ /*tag_value AS tag,*/
  ARRAY_AGG(DISTINCT (0)) AS trace_id_history,
  ARRAY_AGG(DISTINCT (process_meta.source)) as source_history,
  ARRAY_AGG(DISTINCT (process_meta.target)) as  target_history,
  /*ARRAY_AGG(IFNULL(CAST(process_report.end_time AS string),'')) AS end_time_history,*/
  ARRAY_AGG( IFNULL( CAST( process_report.end_time AS string format 'yyyy-mm-dd HH24:MI:SS'),'')) AS end_time_history,
  ARRAY_AGG(process_report.process_date) AS process_date_history,
  /*CAST(COALESCE(NULL,1) as STRING) as total_instance_count,*/ CAST((MAX(success_instance_count) + MAX(failed_instance_count)+ MAX(pending_instance_count)+MAX(others_instance_count)) AS string) AS total_instance_count,
  CAST(MAX(success_instance_count) AS string) AS success_instance_count,
  CAST(MAX(failed_instance_count) AS string) AS failed_instance_count,
  CAST(MAX(pending_instance_count) AS string) AS pending_instance_count,
  CAST(MAX(others_instance_count) AS string) AS others_instance_count
FROM
  `dataobservability_tbls_v.dof_entity_relation_lineage_meta_v` AS meta
INNER JOIN
  `dataobservability_tbls_v.dof_process_monitor_lineage_latest_rpt_v` AS process_report
ON
  process_report.project_name=meta.project_name
  AND process_report.sub_process=meta.sub_process
  -- AND process_report.process_name =case when meta.sub_process in ('soi_egress') then concat('cfi_send_soi_egress_',meta.process_name) else meta.process_name END
  AND process_report.process_name =meta.process_name
  AND UPPER(process_report.frequency) IN ('DAILY') /*select daily, weekly and monthly records*/
INNER JOIN
  `dataobservability_tbls.dof_process_meta` AS process_meta
ON
  process_meta.subprocess_name=process_report.sub_process
    AND case when process_meta.subprocess_name='soi_egress' then concat('cfi_send_soi_egress_',process_meta.process_name) else process_meta.process_name end  =process_report.process_name  
  --AND process_meta.process_name=process_report.process_name 
    AND process_meta.step_id =process_report.step_id
    AND process_meta.process_id =process_report.process_id 
LEFT JOIN
(select distinct concat(file_meta.file_path,file_meta.file_name) as qualified_file_name, file_meta.is_mandatory, file_report.file_pattern, file_report.file_arrival_status, file_report.process_date, file_report.overall_file_status from `dataobservability_tbls.dof_file_meta` file_meta INNER JOIN `dataobservability_tbls.dof_files_monitor_rpt` file_report
on file_meta.file_id = file_report.file_id and file_report.is_valid = true
) file_detail
ON process_meta.source = file_detail.qualified_file_name and process_report.process_date = file_detail.process_date and lower(process_meta.source_type) = 'file'
LEFT JOIN
  `dataobservability_tbls.dof_process_alert_notification_meta` AS alert_meta
ON
  process_meta.application_name=alert_meta.application_name
  AND process_meta.program_name=alert_meta.program_name
  AND process_meta.platform_name=alert_meta.platform_name
  AND process_meta.env_name=alert_meta.env_name
  AND process_meta.process_name=alert_meta.process_name
LEFT JOIN
  `dataobservability_tbls_v.dof_program_name_mapping_v` map
ON
  LOWER(process_report.program_name) = LOWER(map.meta_program_name)
WHERE
  process_report.source_type IS NOT NULL
  AND process_report.target_type IS NOT NULL
  AND process_report.process_status IS NOT NULL
  AND is_valid IS TRUE
  AND (UPPER(process_meta.is_active) = 'Y'
    OR process_meta.is_active IS NULL)
  AND sla_time IS NOT NULL
GROUP BY
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34
UNION ALL
SELECT
  COALESCE(map.mapped_program_name, process_report.program_name) AS project_name,
  process_report.process_id,
  process_report.process_date,
  process_report.sub_process AS subprocess_name,
  process_report.process_poc,
  /*ARRAY_AGG(DISTINCT IFNULL(sla_time, '')) AS sla_history,*/
  process_report.frequency,
  run_day,
  /*ARRAY_AGG(DISTINCT IFNULL(process_report.schedule_time, '')) AS run_hour_history,*/
  is_critical,
  scheduler_name,
  COALESCE(notify_failure, 'Y') AS notify_fails,
  failure_notification_email_list,
  COALESCE(notify_success, 'N') AS notify_success,
  success_notification_email_list,
  process_meta.is_active,
  process_report.application_name,
  create_dt,
  '1',
  source_environment,
   meta.env_name,
  source_servername,
  '1',
  target_environment,
  target_servername,
  meta.process_source AS source,
  meta.process_target AS target,
  process_report.source_type,
  process_report.target_type,
  process_report.process_name,
  COALESCE(map.mapped_program_name, process_report.program_name) AS program_name,
  process_report.monitor_date,
  IF
  (process_report.target_count = 0, NULL, process_report.target_count) AS target_count,
  file_detail.file_arrival_status as source_file_status,
  process_meta.is_mandatory as mandatory_process,
  file_detail.is_mandatory as mandatory_file,
  ARRAY_AGG(DISTINCT IFNULL(CAST(expected_datetime AS STRING format 'yyyy-mm-dd HH24:MI:SS'), '')) AS sla_history,
  ARRAY_AGG( IFNULL( CAST( process_report.start_time AS string format 'yyyy-mm-dd HH24:MI:SS'),'')) AS run_hour_history,
  ARRAY_AGG(DISTINCT IFNULL(process_report.process_status, '')) AS run_status_history,
  ARRAY_AGG(DISTINCT IFNULL(sla_met, '')) AS sla_met_history,
  /*process_report.program_name,*/ /*tag_value AS tag,*/
  ARRAY_AGG(DISTINCT (0)) AS trace_id_history,
  ARRAY_AGG(DISTINCT (process_report.source_name)) AS source_history,
  ARRAY_AGG(DISTINCT (process_report.target_name)) AS target_history,
  /*ARRAY_AGG(IFNULL(CAST(process_report.end_time AS string),'')) AS end_time_history,*/
   ARRAY_AGG( IFNULL( CAST( process_report.end_time AS string format 'yyyy-mm-dd HH24:MI:SS'),'')) AS end_time_history,
  ARRAY_AGG(process_report.process_date) AS process_date_history,
  /*CAST(COALESCE(NULL,1) as STRING) as total_instance_count,*/ CAST((MAX(success_instance_count) + MAX(failed_instance_count)+ MAX(pending_instance_count)+MAX(others_instance_count)) AS string) AS total_instance_count,
  CAST(MAX(success_instance_count) AS string) AS success_instance_count,
  CAST(MAX(failed_instance_count) AS string) AS failed_instance_count,
  CAST(MAX(pending_instance_count) AS string) AS pending_instance_count,
  CAST(MAX(others_instance_count) AS string) AS others_instance_count
FROM
  `dataobservability_tbls_v.dof_entity_relation_lineage_meta_v` AS meta
INNER JOIN
  `dataobservability_tbls_v.dof_process_monitor_lineage_latest_rpt_v` AS process_report
ON
  process_report.project_name=meta.project_name
  AND process_report.sub_process=meta.sub_process
  AND process_report.process_name =meta.process_name
  AND UPPER(process_report.frequency) IN ('REAL_TIME') /*select daily, weekly and monthly records*/
INNER JOIN
  `dataobservability_tbls.dof_realtime_process_meta` AS process_meta
ON
  process_meta.subprocess_name=process_report.sub_process
    AND case when process_meta.subprocess_name='soi_egress' then concat('cfi_send_soi_egress_',process_meta.process_name) else process_meta.process_name end  =process_report.process_name  
  --AND process_meta.process_name=process_report.process_name 
  --AND process_meta.step_id =process_report.step_id
    AND process_meta.process_id =process_report.process_id 
LEFT JOIN
(select distinct concat(file_meta.file_path,file_meta.file_name) as qualified_file_name, file_meta.is_mandatory, file_report.file_pattern, file_report.file_arrival_status, file_report.process_date,file_report.overall_file_status from `dataobservability_tbls.dof_file_meta` file_meta INNER JOIN `dataobservability_tbls.dof_files_monitor_rpt` file_report
on file_meta.file_id = file_report.file_id and file_report.is_valid = true
) file_detail
ON process_meta.source = file_detail.qualified_file_name and process_report.process_date = file_detail.process_date and lower(process_meta.source_type) = 'file'
LEFT JOIN
  `dataobservability_tbls.dof_process_alert_notification_meta` AS alert_meta
ON
  process_meta.application_name=alert_meta.application_name
  AND process_meta.program_name=alert_meta.program_name
  AND process_meta.platform_name=alert_meta.platform_name
  AND process_meta.env_name=alert_meta.env_name
  AND process_meta.process_name=alert_meta.process_name
LEFT JOIN
  `dataobservability_tbls_v.dof_program_name_mapping_v` map
ON
  LOWER(process_report.program_name) = LOWER(map.meta_program_name)
WHERE
  process_report.source_type IS NOT NULL
  AND process_report.target_type IS NOT NULL
  AND process_report.process_status IS NOT NULL
  AND is_valid IS TRUE
  AND (UPPER(process_meta.is_active) = 'Y'
    OR process_meta.is_active IS NULL)
  AND sla_time IS NOT NULL
GROUP BY
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34
UNION ALL
SELECT
  COALESCE(map.mapped_program_name, process_report.program_name) AS project_name,
  process_report.process_id,
  process_report.process_date,
  process_report.sub_process AS subprocess_name,
  process_report.process_poc,
  /*ARRAY_AGG(IFNULL(sla_time, '')) AS sla_history,*/
  process_report.frequency,
  run_day,
  /*ARRAY_AGG(IFNULL(process_report.schedule_time, '')) AS run_hour_history,*/
  is_critical,
  scheduler_name,
  COALESCE(notify_failure, 'Y') AS notify_fails,
  failure_notification_email_list,
  COALESCE(notify_success, 'N') AS notify_success,
  success_notification_email_list,
  process_meta.is_active,
  process_report.application_name,
  create_dt,
  process_seq_num,
  source_environment,
   meta.env_name,
  source_servername,
  sub_process_seq_num,
  target_environment,
  target_servername,
  meta.process_source AS source,
  meta.process_target AS target,
  process_report.source_type,
  process_report.target_type,
  process_report.process_name,
  COALESCE(map.mapped_program_name, process_report.program_name) AS program_name,
  process_report.monitor_date,
IF
  (process_report.target_count = 0, NULL, process_report.target_count) AS target_count,
  file_detail.overall_file_status as source_file_status,
  process_meta.is_mandatory as mandatory_process,
  file_detail.is_mandatory as mandatory_file,
  ARRAY_AGG(IFNULL(CAST(expected_datetime AS STRING format 'yyyy-mm-dd HH24:MI:SS'), '')) AS sla_history,
  ARRAY_AGG( IFNULL( CAST( process_report.start_time AS string format 'yyyy-mm-dd HH24:MI:SS'),'')) AS run_hour_history,
  ARRAY_AGG(IFNULL(process_report.overall_process_status, '')) AS run_status_history,
  ARRAY_AGG(IFNULL(sla_met, '')) AS sla_met_history,
  /*process_report.program_name,*/ /*tag_value AS tag,*/
  ARRAY_AGG(IFNULL(process_report.trace_id, 1)) AS trace_id_history,
  ARRAY_AGG(process_report.source_name) AS source_history,
  ARRAY_AGG(process_report.target_name) AS target_history,
  /*ARRAY_AGG(IFNULL(CAST(process_report.end_time AS string),'')) AS end_time_history,*/
   ARRAY_AGG( IFNULL( CAST( process_report.end_time AS string format 'yyyy-mm-dd HH24:MI:SS'),'')) AS end_time_history,
  ARRAY_AGG(process_report.process_date) AS process_date_history,
  CAST(MAX(total_instance_count) AS string) AS total_instance_count,
  CAST(MAX(success_instance_count) AS string) AS success_instance_count,
  CAST(MAX(failed_instance_count) AS string) AS failed_instance_count,
  CAST(MAX(pending_instance_count) AS string) AS pending_instance_count,
  CAST(MAX(others_instance_count) AS string) AS others_instance_count
FROM
  `dataobservability_tbls_v.dof_entity_relation_lineage_meta_v` AS meta
INNER JOIN (
  SELECT
    *
  FROM (
    SELECT
      DISTINCT lineage.*,
      max_value.max_trace_id
    FROM
      `dataobservability_tbls_v.dof_process_monitor_lineage_latest_rpt_v` AS lineage
    JOIN (
      SELECT
        program_name,
        process_date,
        process_status,
        overall_process_status,
        frequency,
        MAX(trace_id) AS max_trace_id
      FROM
        `dataobservability_tbls_v.dof_process_monitor_lineage_latest_rpt_v`
      WHERE
        TIMESTAMP(DATETIME(CAST(process_date AS DATE), CAST(schedule_time AS TIME))) < CURRENT_TIMESTAMP()
      GROUP BY
        program_name,
        process_date,
        process_status,
        overall_process_status,
        frequency,
        trace_id QUALIFY ROW_NUMBER() OVER (PARTITION BY program_name, process_date, process_status, frequency ORDER BY trace_id DESC) = 1 ) max_value
    ON
      max_value.program_name = lineage.program_name
      AND max_value.process_date = lineage.process_date
      AND max_value.process_status=lineage.process_status
      AND max_value.frequency=lineage.frequency
    WHERE
      lineage.trace_id <= max_trace_id QUALIFY ROW_NUMBER() OVER (PARTITION BY program_name, process_date, process_name, sub_process, process_status ORDER BY trace_id DESC) < 4 )
  WHERE
    UPPER(frequency) IN ('HOURLY',
      'FIXED',
      'HOURLY_CUSTOM')
    AND source_type IS NOT NULL
    AND target_type IS NOT NULL
    AND process_status IS NOT NULL
    AND overall_process_status IS NOT NULL
    AND is_valid IS TRUE
    AND sla_time IS NOT NULL
  ORDER BY
    sub_process,
    schedule_time DESC ) AS process_report
ON
  process_report.project_name=meta.project_name
  AND process_report.sub_process=meta.sub_process
  AND process_report.process_name =meta.process_name
INNER JOIN
  `dataobservability_tbls.dof_process_meta` AS process_meta
ON
  process_meta.subprocess_name=process_report.sub_process
    AND case when process_meta.subprocess_name='soi_egress' then concat('cfi_send_soi_egress_',process_meta.process_name) else process_meta.process_name end  =process_report.process_name  
  --AND process_meta.process_name=process_report.process_name 
    AND process_meta.step_id =process_report.step_id
    AND process_meta.process_id =process_report.process_id 
LEFT JOIN
(select distinct concat(file_meta.file_path,file_meta.file_name) as qualified_file_name, file_meta.is_mandatory, file_report.file_pattern, file_report.file_arrival_status, file_report.process_date,file_report.overall_file_status from `dataobservability_tbls.dof_file_meta` file_meta INNER JOIN `dataobservability_tbls.dof_files_monitor_rpt` file_report
on file_meta.file_id = file_report.file_id and file_report.is_valid = true
) file_detail
ON process_meta.source = file_detail.qualified_file_name and process_report.process_date = file_detail.process_date and lower(process_meta.source_type) = 'file'
LEFT JOIN
  `dataobservability_tbls.dof_process_alert_notification_meta` AS alert_meta
ON
  process_meta.application_name=alert_meta.application_name
  AND process_meta.program_name=alert_meta.program_name
  AND process_meta.platform_name=alert_meta.platform_name
  AND process_meta.env_name=alert_meta.env_name
  AND process_meta.process_name=alert_meta.process_name
LEFT JOIN
  `dataobservability_tbls_v.dof_program_name_mapping_v` map
ON
  LOWER(process_report.program_name) = LOWER(map.meta_program_name)
WHERE
  (UPPER(process_meta.is_active) = 'Y'
    OR process_meta.is_active IS NULL)
GROUP BY
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34
UNION ALL
SELECT
  COALESCE(map.mapped_program_name, process_report.program_name) AS project_name,
  process_report.process_id,
  week_date AS process_date,
  process_report.sub_process AS subprocess_name,
  process_report.process_poc,
  /*ARRAY_AGG(DISTINCT IFNULL(sla_time, '')) AS sla_history,*/
  process_report.frequency,
  run_day,
  /*ARRAY_AGG(DISTINCT IFNULL(process_report.schedule_time, '')) AS run_hour_history,*/
  is_critical,
  scheduler_name,
  COALESCE(notify_failure, 'Y') AS notify_fails,
  failure_notification_email_list,
  COALESCE(notify_success, 'N') AS notify_success,
  success_notification_email_list,
  process_meta.is_active,
  process_report.application_name,
  create_dt,
  process_seq_num,
  source_environment,
  meta.env_name,
  source_servername,
  sub_process_seq_num,
  target_environment,
  target_servername,
  meta.process_source AS source,
  meta.process_target AS target,
  process_report.source_type,
  process_report.target_type,
  process_report.process_name,
  COALESCE(map.mapped_program_name, process_report.program_name) AS program_name,
  process_report.monitor_date,
  IF
  (process_report.target_count = 0, NULL, process_report.target_count) AS target_count,
  file_detail.file_arrival_status as source_file_status,
  process_meta.is_mandatory as mandatory_process,
  file_detail.is_mandatory as mandatory_file,
  ARRAY_AGG( IFNULL(CAST(expected_datetime AS STRING format 'yyyy-mm-dd HH24:mi:SS'), '') order by expected_datetime) AS sla_history,
  ARRAY_AGG( IFNULL( CAST( process_report.start_time AS string format 'yyyy-mm-dd HH24:mi:SS'),'') order by expected_datetime) AS run_hour_history,
  ARRAY_AGG( IFNULL(process_report.process_status, '') order by expected_datetime) AS run_status_history,
  ARRAY_AGG( IFNULL(sla_met, '') order by expected_datetime) AS sla_met_history,
  /*process_report.program_name,*/ /*tag_value AS tag,*/
  ARRAY_AGG(DISTINCT (0)) AS trace_id_history,
  ARRAY_AGG( (process_meta.source) order by expected_datetime) as source_history,
  ARRAY_AGG( (process_meta.target) order by expected_datetime) as target_history,
  /*ARRAY_AGG(IFNULL(CAST(process_report.end_time AS string),'')) AS end_time_history,*/
  ARRAY_AGG( IFNULL( CAST( process_report.end_time AS string format 'yyyy-mm-dd HH24:mi:SS'),'') order by expected_datetime) AS end_time_history,
  ARRAY_AGG( process_report.process_date order by expected_datetime) AS process_date_history,
  /*CAST(COALESCE(NULL,1) as STRING) as total_instance_count,*/ CAST((MAX(success_instance_count) + MAX(failed_instance_count)+ MAX(pending_instance_count)+MAX(others_instance_count)) AS string) AS total_instance_count,
  CAST(MAX(success_instance_count) AS string) AS success_instance_count,
  CAST(MAX(failed_instance_count) AS string) AS failed_instance_count,
  CAST(MAX(pending_instance_count) AS string) AS pending_instance_count,
  CAST(MAX(others_instance_count) AS string) AS others_instance_count
FROM
  `dataobservability_tbls_v.dof_entity_relation_lineage_meta_v` AS meta
INNER JOIN (
  SELECT
    V.*,
    date AS week_date
  FROM (
    SELECT
      *
    FROM
      `dataobservability_tbls_v.dof_process_monitor_lineage_latest_rpt_v`
    WHERE
      process_date > current_date() - 60 and LOWER(frequency) IN ('monthly',
        'weekly')) V
  INNER JOIN (SELECT date,EXTRACT(YEAR FROM date) AS year,EXTRACT(week FROM date) AS week, EXTRACT(Month FROM date) AS Month FROM UNNEST(GENERATE_DATE_ARRAY(current_date-60, current_Date)) AS date ) A /* update to identify common weeks that are present in two months */
  ON
    EXTRACT(YEAR
    FROM
      process_date)=year
    AND
    CASE
      WHEN LOWER(V.frequency) IN ('weekly') THEN EXTRACT(week FROM process_date)= week
     WHEN LOWER(V.frequency) IN ('monthly') THEN EXTRACT(MONTH FROM process_date) = Month
  END
    /* second weekly condition to join successive month in the same week */
  WHERE
    process_date IS NOT NULL
  ORDER BY
    week_date ) AS process_report
ON
  process_report.project_name=meta.project_name
  AND process_report.sub_process=meta.sub_process
  AND process_report.process_name =meta.process_name
  AND UPPER(process_report.frequency) IN ('MONTHLY', 'WEEKLY') /*select weekly and monthly records*/
INNER JOIN
  `dataobservability_tbls.dof_process_meta` AS process_meta
ON
  process_meta.subprocess_name=process_report.sub_process
    AND case when process_meta.subprocess_name='soi_egress' then concat('cfi_send_soi_egress_',process_meta.process_name) else process_meta.process_name end  =process_report.process_name  
  --AND process_meta.process_name=process_report.process_name 
    AND process_meta.step_id =process_report.step_id
    AND process_meta.process_id =process_report.process_id 
LEFT JOIN
(select distinct concat(file_meta.file_path,file_meta.file_name) as qualified_file_name, file_meta.is_mandatory, file_report.file_pattern, file_report.file_arrival_status, file_report.process_date,file_report.overall_file_status from `dataobservability_tbls.dof_file_meta` file_meta INNER JOIN `dataobservability_tbls.dof_files_monitor_rpt` file_report
on file_meta.file_id = file_report.file_id and file_report.is_valid = true
) file_detail
ON process_meta.source = file_detail.qualified_file_name and process_report.process_date = file_detail.process_date and lower(process_meta.source_type) = 'file'
LEFT JOIN
  `dataobservability_tbls.dof_process_alert_notification_meta` AS alert_meta
ON
  process_meta.application_name=alert_meta.application_name
  AND process_meta.program_name=alert_meta.program_name
  AND process_meta.platform_name=alert_meta.platform_name
  AND process_meta.env_name=alert_meta.env_name
  AND process_meta.process_name=alert_meta.process_name
LEFT JOIN
  `dataobservability_tbls_v.dof_program_name_mapping_v` map
ON
  LOWER(process_report.program_name) = LOWER(map.meta_program_name)
WHERE
  process_report.source_type IS NOT NULL
  AND process_report.target_type IS NOT NULL
  AND process_report.process_status IS NOT NULL
  AND is_valid IS TRUE
  AND (UPPER(process_meta.is_active) = 'Y'
    OR process_meta.is_active IS NULL)
  AND sla_time IS NOT NULL
GROUP BY
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34
  ) tbl
  LEFT JOIN
  `dataobservability_tbls_v.dof_metadata_tag_relation_v` AS tags
ON
  tags.metadata_id = tbl.process_id
  LEFT JOIN
(SELECT
    `TBL_COMPLETENESS`,
    `TBL_TIMELINESS`,
    `TBL_UNIQUENESS`,
    run_date,
    DB_NAME,
    SRC_TBL,
    prfl.product_name
  FROM `vz-it-pr-izcv-idmcdo-0.dga_dq_tbls.AUTO_PRFL_RPT_V` prfl
  INNER JOIN `dataobservability_tbls.dof_dq_product_name_mapping_ref` ref
    ON prfl.product_name = ref.product_name
  GROUP BY `TBL_COMPLETENESS`, `TBL_TIMELINESS`, `TBL_UNIQUENESS`, run_date, DB_NAME, SRC_TBL, prfl.product_name) dq
ON tbl.process_date = dq.run_date
  AND (LOWER(ARRAY_REVERSE(SPLIT(dq.DB_NAME, '.'))[SAFE_OFFSET(0)]) = LOWER(ARRAY_REVERSE(SPLIT(tbl.target, '.'))[SAFE_OFFSET(1)]) 
  AND
    LOWER(ARRAY_REVERSE(SPLIT(tbl.target, '.'))[SAFE_OFFSET(0)]) = LOWER(dq.SRC_TBL)
    OR LOWER(dq.SRC_TBL) = LOWER(CONCAT(ARRAY_REVERSE(SPLIT(tbl.target, '.'))[SAFE_OFFSET(0)], '_v'))
  )
where tbl.process_date >= (current_date - 31);


 


