INSERT INTO "vz-it-np-izcv-dev-idmcdo-0"."dga_dq_tbls"."dqaas_profile_rpt"
(
    rpt_seq_num, prfl_id, prfl_type, dq_pillar, src_tbl, meas_name,
    data_dt, feature_name, grouped_columns, count_curr, prfl_run_ts, weekday
)
SELECT
    CAST(900098 AS INTEGER) AS rpt_seq_num,
    CAST(7851 AS INTEGER) AS prfl_id,
    'CUSTOM_RULES' AS prfl_type,
    'Consistency' AS dq_pillar,
    'CUST_ACCT_LINE_ADDR_V' AS src_tbl,
    'CUST_ACCT_LINE_ADDR_V Table count' AS meas_name,
    CAST(LAST_UPD_DT AS DATE) AS data_dt,
    'Tier1 Models' AS feature_name,
    NULL AS grouped_columns,
    COUNT(*) AS count_curr,
    CURRENT_TIMESTAMP AS prfl_run_ts,
    DAYOFWEEK(CAST(LAST_UPD_DT AS DATE)) AS weekday
FROM "NTL_PRD_ALLVM"."CUST_ACCT_LINE_ADDR_V"
WHERE CAST(LAST_UPD_DT AS DATE) >= CURRENT_DATE - 90
GROUP BY
    CAST(LAST_UPD_DT AS DATE),
    DAYOFWEEK(CAST(LAST_UPD_DT AS DATE));




import os
import json
import logging
import pandas as pd
import requests
import teradatasql
from google.cloud import bigquery
import google.auth
import pandas_gbq
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
import re

# ‚úÖ Teradata Configuration
dq_td_config = {
    "hostname": "TDDP.TDC.VZWCORP.COM",
    "uid": "IDQPRDLD",
    "pwd": "Newpass#969",
    "dbname": "idq_prd_tbls"
}

# ‚úÖ BigQuery Configuration
dq_config = {
    "sa_json_file_dtls": os.path.join(os.path.dirname(__file__), "sa-pr-izcv-app-idmcdo-0-oidc-27472-config.json"),
    "conn_project_id": "vz-it-pr-izcv-idmcdo-0",
    "bq_table_name": "your_project.your_dataset.teradata_results"  # ‚úÖ Replace with actual BigQuery table
}

# ‚úÖ Initialize Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ‚úÖ Teradata Client
def teradata_client():
    try:
        print("üîÑ Connecting to Teradata...")
        conn = teradatasql.connect(
            host=dq_td_config["hostname"],
            user=dq_td_config["uid"],
            password=dq_td_config["pwd"],
            database=dq_td_config["dbname"]
        )
        print("‚úÖ Teradata connection successful!")
        return conn
    except Exception as err:
        print(f"‚ùå Error connecting to Teradata: {err}")
        return None

# ‚úÖ BigQuery Client
def bigquery_client():
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = dq_config["sa_json_file_dtls"]
    os.environ['GOOGLE_CLOUD_PROJECT'] = dq_config["conn_project_id"]
    credentials, _ = google.auth.default()
    return bigquery.Client(credentials=credentials, project=dq_config["conn_project_id"]), credentials

# ‚úÖ Fix SQL Query Formatting for Teradata
def fix_query_format(query):
    """
    Ensures schema and table names with hyphens are properly quoted in double quotes.
    """
    print(f"üîç Original Query Before Fixing:\n{query}\n")

    # ‚úÖ Fix schema and table names (proper double-quoting)
    fixed_query = re.sub(r'(\b[a-zA-Z0-9_-]+-[a-zA-Z0-9_-]+\b)', r'"\1"', query)

    # ‚úÖ Fix column values (remove unnecessary double quotes)
    fixed_query = re.sub(r'(["\'])(\w+\s\w+)(["\'])', r"'\2'", fixed_query)

    print(f"‚úÖ Fixed Query:\n{fixed_query}\n")
    return fixed_query

# ‚úÖ Load Data into BigQuery
def load_result_to_bq(dq_bq_client, df_load_data):
    try:
        if df_load_data.empty:
            print(f"‚ö†Ô∏è No data to insert into BigQuery for table {dq_config['bq_table_name']}")
            return

        print("üìå DataFrame before inserting into BigQuery:")
        print(df_load_data.head())

        pandas_gbq.to_gbq(
            dataframe=df_load_data,
            destination_table=dq_config["bq_table_name"],
            if_exists="append",
            credentials=dq_bq_client,
            project_id=dq_config["conn_project_id"],
        )
        print(f"‚úÖ Successfully loaded {len(df_load_data)} rows into {dq_config['bq_table_name']}")
    except Exception as err:
        print(f"‚ùå Error loading results into BigQuery: {err}")

# ‚úÖ Process SQL File Upload and Execute Queries
@method_decorator(csrf_exempt, name="dispatch")
class ExecuteHistorySQL(View):
    def post(self, request):
        try:
            print(f"üìÇ Received FILES: {request.FILES}")

            if "file" not in request.FILES:
                print("‚ùå No file uploaded.")
                return JsonResponse({"status": "failure", "message": "No file uploaded."}, status=400)

            file = request.FILES["file"]
            file_content = file.read().decode("utf-8").strip()
            print(f"üìÑ File content:\n{file_content}")

            queries = file_content.split(";")
            results = {}

            for query in queries:
                query = query.strip()
                if not query:
                    continue

                # ‚úÖ Fix query formatting
                query = fix_query_format(query)
                print(f"üìå Executing Fixed Query:\n{query}")

                try:
                    conn = teradata_client()
                    if conn is None:
                        return JsonResponse({"status": "failure", "message": "Teradata connection failed."}, status=500)

                    cursor = conn.cursor()
                    print(f"üìå Running Query:\n{query}")
                    cursor.execute(query)
                    conn.commit()

                    # ‚úÖ If it's an INSERT, verify row count
                    if query.lower().startswith("insert"):
                        table_name = query.split("INTO")[1].split("(")[0].strip()
                        verify_query = f'SELECT COUNT(*) FROM {table_name}'
                        cursor.execute(verify_query)
                        row_count = cursor.fetchone()[0]
                        print(f"‚úÖ INSERT query executed successfully. {row_count} rows inserted.")
                        results[query[:30]] = f"INSERT query executed successfully. {row_count} rows inserted."
                    
                    # ‚úÖ If it's a SELECT, transfer data to BigQuery
                    elif query.lower().startswith("select"):
                        results_list = cursor.fetchall()
                        print(f"‚úÖ SELECT query executed. Rows fetched: {len(results_list)}")

                        if results_list:
                            df = pd.DataFrame(results_list, columns=[desc[0] for desc in cursor.description])
                            print("üìå DataFrame from Teradata:")
                            print(df.head())

                            bq_client, _ = bigquery_client()
                            load_result_to_bq(dq_bq_client=bq_client, df_load_data=df)

                            results[query[:30]] = f"TD to GCP Query executed successfully. {len(df)} rows inserted."

                    cursor.close()
                    conn.close()

                except Exception as e:
                    print(f"‚ùå Query execution failed: {query}\nError: {e}")
                    return JsonResponse({"status": "failure", "message": str(e)}, status=500)

            return JsonResponse({"status": "success", "results": results}, status=200)

        except Exception as e:
            print(f"‚ùå Error processing request: {e}")
            return JsonResponse({"status": "failure", "message": str(e)}, status=500)
