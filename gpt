## Loading Results to Report Table
def load_to_report_results(self, df_report_result: pd.DataFrame, reference_key: str):
    try:
        ## BigQuery Client Connection
        dbclient, db_creds = self.utils.bigquery_client(
            auth=config.dq_gcp_auth_payload
        )

        # Assign reference key
        df_report_result["rpt_ref_key"] = reference_key

        # Ensure correct data types before loading
        numeric_columns = ["count_curr", "avg_count_prev", "variance_value", "std_dev_value",
                           "sigma_2_value", "min_thresh_value", "max_thresh_value", "pct_change",
                           "consistency_score", "dq_score", "rpt_seq_num"]

        for col in numeric_columns:
            if col in df_report_result.columns:
                df_report_result[col] = pd.to_numeric(df_report_result[col], errors='coerce')  # Convert to numeric, coerce errors to NaN

        # Convert datetime columns
        if 'data_dt' in df_report_result.columns:
            df_report_result['data_dt'] = pd.to_datetime(df_report_result['data_dt'], errors='coerce')

        if 'insert_date' in df_report_result.columns:
            df_report_result['insert_date'] = pd.to_datetime(df_report_result['insert_date'], errors='coerce')

        if 'prfl_run_ts' in df_report_result.columns:
            df_report_result['prfl_run_ts'] = pd.to_datetime(df_report_result['prfl_run_ts'], errors='coerce')

        # Log if there are NaN values after conversion
        if df_report_result[numeric_columns].isna().sum().sum() > 0:
            self.logger.warning("‚ö†Ô∏è Warning: Some numeric values couldn't be converted. Check for missing data.")

        self.logger.info(f"üîπ Data Types Fixed Before BigQuery Load: \n{df_report_result.dtypes}")

        ## Loading Table Level Report
        self.utils.load_result_to_bq_report_table(
            dq_bq_client=dbclient,
            dq_credentials=db_creds,
            dq_report_table_name=config.dqaas_profile_rpt,
            df_load_data=df_report_result,
            seq_name='rpt_seq_num',
            column_details=self.custom_profile_report_columns
        )

    except Exception as err:
        self.logger.error(f"Error Occurred while loading Results to BigQuery Table. Error: {err}")
