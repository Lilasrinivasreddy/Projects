import os
import json
import logging
import pandas as pd
import time
import requests
import teradatasql
from requests.exceptions import HTTPError
from google.cloud import bigquery
import google.auth
import pandas_gbq
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View

# ‚úÖ Teradata Configuration
dq_td_config = {
    "hostname": "TDDP.TDC.VZWCORP.COM",  # Replace with actual Teradata host
    "uid": "IDQPRDLD",  # Replace with your Teradata username
    "pwd": "Newpass#969",  # Replace with your Teradata password
    "dbname": "idq_prd_tbls"  # Replace with your database name
}

# ‚úÖ Google BigQuery Configuration
dq_config = {
    "sa_json_file_dtls": os.path.join(os.path.dirname(__file__), "sa-pr-izcv-app-idmcdo-0-oidc-27472-config.json"),
    "conn_project_id": "vz-it-pr-izcv-idmcdo-0",
    "bq_table_name": "your_project.your_dataset.dqaas_profile_rpt"  # ‚úÖ Replace with actual BigQuery table
}

# ‚úÖ Initialize Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ‚úÖ Connect to Teradata
def teradata_client():
    try:
        logger.info("üîÑ Connecting to Teradata...")
        conn = teradatasql.connect(
            host=dq_td_config["hostname"],
            user=dq_td_config["uid"],
            password=dq_td_config["pwd"],
            database=dq_td_config["dbname"]
        )
        logger.info("‚úÖ Teradata connection successful!")
        return conn
    except Exception as err:
        logger.error(f"‚ùå Teradata connection failed: {err}")
        return None

# ‚úÖ Connect to Google BigQuery
def bigquery_client():
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = dq_config["sa_json_file_dtls"]
    os.environ['GOOGLE_CLOUD_PROJECT'] = dq_config["conn_project_id"]
    credentials, _ = google.auth.default()
    return bigquery.Client(credentials=credentials, project=dq_config["conn_project_id"]), credentials

# ‚úÖ Function to Load DataFrame to BigQuery
def load_result_to_bq(dq_bq_client, df_load_data):
    try:
        logger.info(f"üìå Loading results into BigQuery table: {dq_config['bq_table_name']}")
        
        if df_load_data.empty:
            logger.warning(f"‚ö†Ô∏è No data to insert into BigQuery for table {dq_config['bq_table_name']}")
            return
        
        # ‚úÖ Ensure column names are lowercase
        df_load_data = df_load_data.rename(columns={col: col.lower() for col in df_load_data.columns})
        
        pandas_gbq.to_gbq(
            dataframe=df_load_data,
            destination_table=dq_config["bq_table_name"],
            if_exists="append",
            project_id=dq_config["conn_project_id"],
        )
        logger.info(f"‚úÖ Successfully loaded {len(df_load_data)} rows into {dq_config['bq_table_name']}")
    except Exception as err:
        logger.error(f"‚ùå Error loading results into BigQuery: {err}")

# ‚úÖ Django View to Process SQL File Upload
@method_decorator(csrf_exempt, name="dispatch")
class ExecuteHistorySQL(View):
    def post(self, request):
        try:
            logger.info(f"üìÇ Received FILES: {request.FILES}")

            if "file" not in request.FILES:
                return JsonResponse({"status": "failure", "message": "No file uploaded."}, status=400)

            file = request.FILES["file"]
            queries = file.read().decode("utf-8").strip().split(";")
            results = {}

            for query in queries:
                query = query.strip()
                if not query:
                    continue

                logger.info(f"üìå Executing query: {query}")

                try:
                    conn = teradata_client()
                    if conn is None:
                        return JsonResponse({"status": "failure", "message": "Teradata connection failed."}, status=500)

                    cursor = conn.cursor()
                    cursor.execute(query)
                    results_list = cursor.fetchall()

                    if not results_list:
                        logger.warning(f"‚ö†Ô∏è Query returned no data: {query}")
                        continue  # Skip processing if no results

                    df = pd.DataFrame(results_list, columns=[desc[0] for desc in cursor.description])
                    cursor.close()
                    conn.close()

                    # ‚úÖ Load results to BigQuery
                    bq_client, _ = bigquery_client()
                    load_result_to_bq(dq_bq_client=bq_client, df_load_data=df)

                    results[query[:30]] = f"‚úÖ Data inserted successfully in BigQuery. {len(df)} rows."

                except Exception as e:
                    logger.error(f"‚ùå Query execution failed: {query}\nError: {e}")
                    return JsonResponse({"status": "failure", "message": str(e)}, status=500)

            return JsonResponse({"status": "success", "results": results}, status=200)

        except Exception as e:
            logger.error(f"‚ùå Error processing request: {e}")
            return JsonResponse({"status": "failure", "message": str(e)}, status=500)
