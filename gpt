import math
import traceback

def send_opsgenie_jira_outlier_alert(self, reference_key: str):
    try:
        # SQL query to fetch required data
        report_query = f"""                
            SELECT rpt.*, 
                   mtd.data_lob, mtd.data_sub_dmn, mtd.database_name, mtd.table_name, 
                   mtd.data_src, mtd.dq_pillar, mtd.opsgenie_api, mtd.opsgenie_flag
            FROM {config.dqaas_mtd} mtd 
            INNER JOIN (
                SELECT * 
                FROM {config.dqaas_profile_rpt} 
                WHERE rpt_ref_key = '{reference_key}' 
                  AND (dq_status = 'LOW' OR sigma_value = 'outlier')
            ) rpt ON mtd.profile_id = rpt.profile_id
            WHERE UPPER(mtd.profile_type) = 'RULE_CUSTOM'
        """
        
        self.logger.info(f"Executing Opsgenie Info Query: {report_query}")

        # Fetch results into a DataFrame
        report_df = self.utils.run_bq_sql(
            bq_auth=config.dq_gcp_auth_payload,
            select_query=report_query
        )

        if report_df.empty:
            self.logger.warning("No records found for Opsgenie alert")
            return

        self.logger.info(f"Initial Report DataFrame: {report_df.shape[0]} records found.")

        # Apply filter directly to the DataFrame
        report_df = report_df[report_df['Domain Name'] == 'One_ex_Model_DQ_TIER1']

        if report_df.empty:
            self.logger.warning("No records match the specified Domain Name")
            return

        self.logger.info(f"Filtered DataFrame: {report_df.shape[0]} records match the Domain Name 'One_ex_Model_DQ_TIER1'.")

        # Iterate through the filtered DataFrame
        for idx, row in report_df.iterrows():
            alert_type, priority = None, None

            if row['dq_status'].upper() == "LOW":
                alert_type, priority = 'custom_profile_failed', "P3"
            elif str(row['sigma_value']).lower() == "outlier":
                alert_type, priority = 'custom_profile_outlier', "P3"

            if alert_type and str(row['opsgenie_flag']).upper() == "Y":
                try:
                    profile_type = "custom"
                    env = config.get_config_values('environment', 'env')
                    api_key = row['opsgenie_api']

                    if not api_key or (isinstance(api_key, float) and math.isnan(api_key)):
                        api_key = config.get_config_values('opsgenie', 'api_key')

                    report_df.rename(columns=str.upper, inplace=True)
                    opsgenie_client = Alert(api_key=api_key, proxy=config.GCP_HTTP_PROXY_URL)

                    response, request_id, message = opsgenie_client.create_opsgenie_alert(
                        report_df, idx, alert_type, priority, env, profile_type
                    )

                    self.logger.info(f"Opsgenie alert sent successfully. Response Code: {response}")

                except Exception as ops_err:
                    self.logger.error(f"Error sending Opsgenie alert: {ops_err}")
                    self.logger.debug(traceback.format_exc())

            elif pd.notna(row.get('JIRA_ASSIGNEE')):
                try:
                    summary = f"LensX | DQ Issue | Table: {row['TABLE_NAME']}"
                    description = f"DQ Issue detected for Table {row['TABLE_NAME']} on Run Date {row['PRFL_RUN_DT']}."
                    jira_client = Jira_ticket()
                    ticket_id = jira_client.create_jira_ticket(row['JIRA_ASSIGNEE'], summary, description, "DQaaS")

                    self.logger.info(f"JIRA ticket created successfully: {ticket_id}")

                except Exception as jira_err:
                    self.logger.error(f"Error creating JIRA ticket: {jira_err}")
                    self.logger.debug(traceback.format_exc())

    except Exception as err:
        self.logger.error(f"Unhandled error in send_opsgenie_jira_outlier_alert: {err}")
        self.logger.debug(traceback.format_exc())