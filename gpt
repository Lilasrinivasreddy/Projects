#-----------------------PROCESS VALIDATION SCRIPT----------------------------------------------------------------
if not process_meta.empty:
    # Drop rows with all values empty
    process_meta.dropna(axis=0, how="all", inplace=True)
    total_process_count = process_meta.shape[0]

    # Replace empty strings with null values
    process_meta = process_meta.infer_objects(copy=False).replace(r'^\s*$', np.nan, regex=True)

    # Remove leading/trailing whitespaces
    process_meta = process_meta.applymap(lambda x: x.strip() if isinstance(x, str) else x)

    # Update variables based on the environment
    if "dev" in env:
        process_meta.replace(dict(zip(variable_list, dev_list)), inplace=True, regex=True)
    elif "test" in env:
        process_meta.replace(variable_list, test_list, inplace=True, regex=True)
    elif "ple" in env:
        process_meta.replace(variable_list, ple_list, inplace=True, regex=True)
    else:
        process_meta.replace(variable_list, prod_list, inplace=True, regex=True)

    process_meta = process_meta.astype("string")

    # Update Data Types for Integer Columns
    for col in process_integer_column:
        process_meta[col] = process_meta[col].replace('', np.nan).fillna('0').astype(int)

    # Update Data Types for Boolean Columns
    for col in process_boolean_column:
        process_meta[col] = process_meta[col].replace('', np.nan).map({'Y': True, 'N': False}).fillna(False)

    # Initialize Validation Counts
    validation_issues = []

    # OBS POC Validation
    obs_poc_cnt = process_meta['obs_poc'].isna().sum()
    if obs_poc_cnt > 0:
        validation_issues.append(f"Missing OBS POC values: {obs_poc_cnt}")

    # Program Name Validation
    program_name_validation_cnt = process_meta['program_name'].isna().sum()
    if program_name_validation_cnt > 0:
        validation_issues.append(f"Missing Program Names: {program_name_validation_cnt}")

    # Application Name Validation
    application_name_validation_cnt = process_meta['application_name'].isna().sum() + process_meta.loc[
        process_meta['application_name'].str.strip().str.contains(r'\s', case=False), :].shape[0]
    if application_name_validation_cnt > 0:
        validation_issues.append(f"Invalid Application Names: {application_name_validation_cnt}")

    # Process Name Validation
    process_name_validation_cnt = process_meta['process_name'].isna().sum() + process_meta.loc[
        process_meta['process_name'].str.strip().str.contains(r'\s', case=False), :].shape[0]
    if process_name_validation_cnt > 0:
        validation_issues.append(f"Invalid Process Names: {process_name_validation_cnt}")

    # Subprocess Name Validation
    subprocess_name_validation_cnt = process_meta['subprocess_name'].isna().sum() + process_meta.loc[
        process_meta['subprocess_name'].str.strip().str.contains(r'\s', case=False), :].shape[0]
    if subprocess_name_validation_cnt > 0:
        validation_issues.append(f"Invalid Subprocess Names: {subprocess_name_validation_cnt}")

    # Frequency Validation
    process_meta["frequency"] = process_meta["frequency"].str.lower()
    frequency_validation_cnt = process_meta['frequency'].isna().sum() + (
        total_process_count - process_meta['frequency'].str.strip().str.lower().isin(frequency_list).sum())
    if frequency_validation_cnt > 0:
        validation_issues.append(f"Invalid Frequency values: {frequency_validation_cnt}")

    # Critical Validation
    process_meta['is_critical'] = process_meta['is_critical'].replace('', "N")
    is_critical_validation_cnt = total_process_count - process_meta['is_critical'].fillna('n').str.lower().isin(flags).sum()
    if is_critical_validation_cnt > 0:
        validation_issues.append(f"Invalid Is Critical values: {is_critical_validation_cnt}")

    # Platform Name Validation
    platform_name_validation_cnt = total_process_count - process_meta['platform_name'].fillna('na').str.lower().isin(platform_list).sum()
    if platform_name_validation_cnt > 0:
        validation_issues.append(f"Invalid Platform Names: {platform_name_validation_cnt}")

    # Environment Name Validation
    env_name_validation_cnt = total_process_count - process_meta['env_name'].fillna('na').str.lower().isin(env_list).sum()
    if env_name_validation_cnt > 0:
        validation_issues.append(f"Invalid Environment Names: {env_name_validation_cnt}")

    # Process POC Validation (Email Format)
    process_poc_validation_cnt = total_process_count - process_meta.loc[
        process_meta['process_poc'].fillna('na').str.contains(r'[^@]+@[^@]+\.[^@]+', case=False), :].shape[0]
    if process_poc_validation_cnt > 0:
        validation_issues.append(f"Invalid Process POC Emails: {process_poc_validation_cnt}")

    # Scheduler Name Validation
    scheduler_name_validation_cnt = total_process_count - process_meta['scheduler_name'].fillna('na').str.lower().isin(scheduler_list).sum()
    if scheduler_name_validation_cnt > 0:
        validation_issues.append(f"Invalid Scheduler Names: {scheduler_name_validation_cnt}")

    # Logs Enabled Validation
    logs_enabled_validation_cnt = total_process_count - process_meta['logs_enabled'].str.lower().isin(flags).sum()
    if logs_enabled_validation_cnt > 0:
        validation_issues.append(f"Invalid Logs Enabled values: {logs_enabled_validation_cnt}")

    # Mandatory Validation
    process_meta['is_mandatory'] = process_meta['is_mandatory'].replace('', "N")
    is_mandatory_validation_cnt = total_process_count - process_meta['is_mandatory'].fillna('n').str.lower().isin(flags).sum()
    if is_mandatory_validation_cnt > 0:
        validation_issues.append(f"Invalid Is Mandatory values: {is_mandatory_validation_cnt}")

    # Business Unit Validation
    businessunit_validation_cnt = total_process_count - process_meta['businessunit'].fillna('n').str.lower().isin(businessunit_list).sum()
    if businessunit_validation_cnt > 0:
        validation_issues.append(f"Invalid Business Unit values: {businessunit_validation_cnt}")

    # VSAD Validation
    vsad_validation_cnt = process_meta['vsad'].isna().sum()
    if vsad_validation_cnt > 0:
        validation_issues.append(f"Missing VSAD values: {vsad_validation_cnt}")

    # Timezone Validation
    process_meta["timezone"] = process_meta["timezone"].replace('', "UTC").str.upper()
    timezone_validation_cnt = total_process_count - process_meta['timezone'].isin(time_zone_list).sum()
    if timezone_validation_cnt > 0:
        validation_issues.append(f"Invalid Timezone values: {timezone_validation_cnt}")

    # Source and Target Validation
    process_meta_source_filtered = process_meta[process_meta['source'].str.len() != 0]
    source_type_validation_cnt = process_meta_source_filtered.shape[0] - process_meta_source_filtered['source_type'].str.lower().isin(source_type_list).sum()
    if source_type_validation_cnt > 0:
        validation_issues.append(f"Invalid Source Types: {source_type_validation_cnt}")

    process_meta_target_filtered = process_meta[process_meta['target'].str.len() != 0]
    target_type_validation_cnt = process_meta_target_filtered.shape[0] - process_meta_target_filtered['target_type'].str.lower().isin(target_type_list).sum()
    if target_type_validation_cnt > 0:
        validation_issues.append(f"Invalid Target Types: {target_type_validation_cnt}")

    # Run Date Buffer Validation
    process_meta['run_date_buffer_interval'] = process_meta['run_date_buffer_interval'].replace('', "0")
    run_date_buffer_interval_validation_cnt = total_process_count - process_meta.loc[
        process_meta['run_date_buffer_interval'].fillna('0').str.contains(r'[0-9]', case=False), :].shape[0]
    if run_date_buffer_interval_validation_cnt > 0:
        validation_issues.append(f"Invalid Run Date Buffer Interval values: {run_date_buffer_interval_validation_cnt}")

    # Collect Volume Validation
    process_meta['collect_volume'] = process_meta['collect_volume'].replace('', "false")
    collect_volume_validation_cnt = total_process_count - process_meta['collect_volume'].fillna('false').str.lower().isin(bool_flag).sum()
    if collect_volume_validation_cnt > 0:
        validation_issues.append(f"Invalid Collect Volume values: {collect_volume_validation_cnt}")

    # Duration Threshold Validation
    process_meta['duration_threshold_low_value'] = process_meta['duration_threshold_low_value'].replace('', "20")
    process_meta['duration_threshold_high_value'] = process_meta['duration_threshold_high_value'].replace('', "20")
    duration_threshold_low_value_validation_cnt = total_process_count - process_meta.loc[
        process_meta['duration_threshold_low_value'].fillna('20').str.contains(r'[0-9]', case=False), :].shape[0]
    duration_threshold_high_value_validation_cnt = total_process_count - process_meta.loc[
        process_meta['duration_threshold_high_value'].fillna('20').str.contains(r'[0-9]', case=False), :].shape[0]
    if duration_threshold_low_value_validation_cnt > 0 or duration_threshold_high_value
===========================================
#-----------------------PROCESS VALIDATION SCRIPT----------------------------------------------------------------
if not process_meta.empty:
    # Drop rows with all values empty
    process_meta.dropna(axis=0, how="all", inplace=True)
    total_process_count = process_meta.shape[0]

    # Replace empty strings with null values
    process_meta = process_meta.infer_objects(copy=False).replace(r'^\s*$', np.nan, regex=True)

    # Remove leading/trailing whitespaces
    process_meta = process_meta.applymap(lambda x: x.strip() if isinstance(x, str) else x)

    # Update variables based on the environment
    if "dev" in env:
        process_meta.replace(dict(zip(variable_list, dev_list)), inplace=True, regex=True)
    elif "test" in env:
        process_meta.replace(variable_list, test_list, inplace=True, regex=True)
    elif "ple" in env:
        process_meta.replace(variable_list, ple_list, inplace=True, regex=True)
    else:
        process_meta.replace(variable_list, prod_list, inplace=True, regex=True)

    process_meta = process_meta.astype("string")

    # Update Data Types for Integer Columns
    for col in process_integer_column:
        process_meta[col] = process_meta[col].replace('', np.nan).fillna('0').astype(int)

    # Update Data Types for Boolean Columns
    for col in process_boolean_column:
        process_meta[col] = process_meta[col].replace('', np.nan).map({'Y': True, 'N': False}).fillna(False)

    # Validations
    validation_issues = []

    # Program Name Validation
    invalid_program_name_count = process_meta['program_name'].isna().sum()
    if invalid_program_name_count > 0:
        validation_issues.append(f"Missing Program Names: {invalid_program_name_count}")

    # Application Name Validation
    invalid_application_name_count = process_meta['application_name'].isna().sum() + process_meta.loc[
        process_meta['application_name'].str.match(r'^\S+$', na=False) == False].shape[0]
    if invalid_application_name_count > 0:
        validation_issues.append(f"Invalid Application Names (contains whitespace or empty): {invalid_application_name_count}")

    # Process Name Validation
    invalid_process_name_count = process_meta['process_name'].isna().sum() + process_meta.loc[
        process_meta['process_name'].str.match(r'^\S+$', na=False) == False].shape[0]
    if invalid_process_name_count > 0:
        validation_issues.append(f"Invalid Process Names (contains whitespace or empty): {invalid_process_name_count}")

    # Subprocess Name Validation
    invalid_subprocess_name_count = process_meta['subprocess_name'].isna().sum() + process_meta.loc[
        process_meta['subprocess_name'].str.match(r'^\S+$', na=False) == False].shape[0]
    if invalid_subprocess_name_count > 0:
        validation_issues.append(f"Invalid Subprocess Names (contains whitespace or empty): {invalid_subprocess_name_count}")

    # Frequency Validation
    invalid_frequency_count = total_process_count - process_meta['frequency'].str.lower().isin(frequency_list).sum()
    if invalid_frequency_count > 0:
        validation_issues.append(f"Invalid Frequency values: {invalid_frequency_count}")

    # Platform Name Validation
    invalid_platform_count = total_process_count - process_meta['platform_name'].str.lower().isin(platform_list).sum()
    if invalid_platform_count > 0:
        validation_issues.append(f"Invalid Platform Names: {invalid_platform_count}")

    # Environment Name Validation
    invalid_env_name_count = total_process_count - process_meta['env_name'].str.lower().isin(env_list).sum()
    if invalid_env_name_count > 0:
        validation_issues.append(f"Invalid Environment Names: {invalid_env_name_count}")

    # Is Active Validation
    invalid_is_active_count = total_process_count - process_meta['is_active'].fillna('N').str.upper().isin(['Y', 'N']).sum()
    if invalid_is_active_count > 0:
        validation_issues.append(f"Invalid Is Active values: {invalid_is_active_count}")

    # Process POC Validation
    invalid_poc_count = total_process_count - process_meta.loc[
        process_meta['process_poc'].str.contains(r'[^@]+@[^@]+\.[^@]+', na=False)].shape[0]
    if invalid_poc_count > 0:
        validation_issues.append(f"Invalid Process POC Emails: {invalid_poc_count}")

    # Scheduler Name Validation
    invalid_scheduler_count = total_process_count - process_meta['scheduler_name'].str.lower().isin(scheduler_list).sum()
    if invalid_scheduler_count > 0:
        validation_issues.append(f"Invalid Scheduler Names: {invalid_scheduler_count}")

    # Logs Enabled Validation
    invalid_logs_enabled_count = total_process_count - process_meta['logs_enabled'].str.lower().isin(flags).sum()
    if invalid_logs_enabled_count > 0:
        validation_issues.append(f"Invalid Logs Enabled values: {invalid_logs_enabled_count}")

    # Timezone Validation
    process_meta["timezone"] = process_meta["timezone"].replace('', "UTC").str.upper()
    invalid_timezone_count = total_process_count - process_meta['timezone'].isin(time_zone_list).sum()
    if invalid_timezone_count > 0:
        validation_issues.append(f"Invalid Timezone values: {invalid_timezone_count}")

    # Source and Target Validation
    process_meta_source_filtered = process_meta[process_meta['source'].str.len() != 0]
    invalid_source_type_count = process_meta_source_filtered.shape[0] - process_meta_source_filtered['source_type'].str.lower().isin(source_type_list).sum()
    if invalid_source_type_count > 0:
        validation_issues.append(f"Invalid Source Types: {invalid_source_type_count}")

    process_meta_target_filtered = process_meta[process_meta['target'].str.len() != 0]
    invalid_target_type_count = process_meta_target_filtered.shape[0] - process_meta_target_filtered['target_type'].str.lower().isin(target_type_list).sum()
    if invalid_target_type_count > 0:
        validation_issues.append(f"Invalid Target Types: {invalid_target_type_count}")

    # Cron Validation
    cron_validation_issues = []
    for index, row in process_meta.iterrows():
        schedule = row['schedule_interval']
        frequency = row['frequency'].lower()
        if frequency == 'daily' and not re.match(r'^\d{1,2} \d{1,2} \* \* \*$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for daily frequency - {schedule}")
        elif frequency == 'weekly' and not re.match(r'^\d{1,2} \d{1,2} \* \* (MON|TUE|WED|THU|FRI|SAT|SUN)$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for weekly frequency - {schedule}")
        elif frequency == 'hourly' and not re.match(r'^\d{1,2} \* \* \* \*$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for hourly frequency - {schedule}")
        elif frequency == 'monthly' and not re.match(r'^\d{1,2} \d{1,2} \d{1,2} \* \*$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for monthly frequency - {schedule}")
        elif frequency == 'hourly_custom' and not re.match(r'^\d{1,2} \*/\d{1,2} \* \* \*$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for custom hourly frequency - {schedule}")
        elif frequency not in ['daily', 'weekly', 'hourly', 'monthly', 'hourly_custom']:
            cron_validation_issues.append(f"Row {index + 1}: Unknown frequency - {frequency}")

    if cron_validation_issues:
        validation_issues.extend(cron_validation_issues)

    # Raise Validation Errors or Load Data
    if validation_issues:
        raise ValueError(f"PROCESS META VALIDATION FAILED:\n\n" + "\n".join(validation_issues))
    else:
        load_table(process_meta, process_table_id)
        print("Data loaded to Process staging Table")

else:
    print("Process Tab is Empty")
===================
#-----------------------PROCESS VALIDATION SCRIPT----------------------------------------------------------------
if not process_meta.empty:
    # Drop rows with all values empty
    process_meta.dropna(axis=0, how="all", inplace=True)
    total_process_count = process_meta.shape[0]

    # Replace empty strings with null values
    process_meta = process_meta.infer_objects(copy=False).replace(r'^\s*$', np.nan, regex=True)

    # Remove leading/trailing whitespaces
    process_meta = process_meta.applymap(lambda x: x.strip() if isinstance(x, str) else x)

    # Update variables based on the environment
    if "dev" in env:
        process_meta.replace(dict(zip(variable_list, dev_list)), inplace=True, regex=True)
    elif "test" in env:
        process_meta.replace(variable_list, test_list, inplace=True, regex=True)
    elif "ple" in env:
        process_meta.replace(variable_list, ple_list, inplace=True, regex=True)
    else:
        process_meta.replace(variable_list, prod_list, inplace=True, regex=True)

    process_meta = process_meta.astype("string")

    # Update Data Types for Integer Columns
    for col in process_integer_column:
        process_meta[col] = process_meta[col].replace('', np.nan).fillna('0').astype(int)

    # Update Data Types for Boolean Columns
    for col in process_boolean_column:
        process_meta[col] = process_meta[col].replace('', np.nan).map({'Y': True, 'N': False}).fillna(False)

    # Validations
    validation_issues = []

    # Program Name Validation
    invalid_program_name_count = process_meta['program_name'].isna().sum()
    if invalid_program_name_count > 0:
        validation_issues.append(f"Missing Program Names: {invalid_program_name_count}")

    # Application Name Validation
    invalid_application_name_count = process_meta['application_name'].isna().sum() + process_meta.loc[
        process_meta['application_name'].str.match(r'^\S+$', na=False) == False].shape[0]
    if invalid_application_name_count > 0:
        validation_issues.append(f"Invalid Application Names (contains whitespace or empty): {invalid_application_name_count}")

    # Process Name Validation
    invalid_process_name_count = process_meta['process_name'].isna().sum() + process_meta.loc[
        process_meta['process_name'].str.match(r'^\S+$', na=False) == False].shape[0]
    if invalid_process_name_count > 0:
        validation_issues.append(f"Invalid Process Names (contains whitespace or empty): {invalid_process_name_count}")

    # Subprocess Name Validation
    invalid_subprocess_name_count = process_meta['subprocess_name'].isna().sum() + process_meta.loc[
        process_meta['subprocess_name'].str.match(r'^\S+$', na=False) == False].shape[0]
    if invalid_subprocess_name_count > 0:
        validation_issues.append(f"Invalid Subprocess Names (contains whitespace or empty): {invalid_subprocess_name_count}")

    # Frequency Validation
    invalid_frequency_count = total_process_count - process_meta['frequency'].str.lower().isin(frequency_list).sum()
    if invalid_frequency_count > 0:
        validation_issues.append(f"Invalid Frequency values: {invalid_frequency_count}")

    # Platform Name Validation
    invalid_platform_count = total_process_count - process_meta['platform_name'].str.lower().isin(platform_list).sum()
    if invalid_platform_count > 0:
        validation_issues.append(f"Invalid Platform Names: {invalid_platform_count}")

    # Environment Name Validation
    invalid_env_name_count = total_process_count - process_meta['env_name'].str.lower().isin(env_list).sum()
    if invalid_env_name_count > 0:
        validation_issues.append(f"Invalid Environment Names: {invalid_env_name_count}")

    # Is Active Validation
    invalid_is_active_count = total_process_count - process_meta['is_active'].fillna('N').str.upper().isin(['Y', 'N']).sum()
    if invalid_is_active_count > 0:
        validation_issues.append(f"Invalid Is Active values: {invalid_is_active_count}")

    # Process POC Validation
    invalid_poc_count = total_process_count - process_meta.loc[
        process_meta['process_poc'].str.contains(r'[^@]+@[^@]+\.[^@]+', na=False)].shape[0]
    if invalid_poc_count > 0:
        validation_issues.append(f"Invalid Process POC Emails: {invalid_poc_count}")

    # Scheduler Name Validation
    invalid_scheduler_count = total_process_count - process_meta['scheduler_name'].str.lower().isin(scheduler_list).sum()
    if invalid_scheduler_count > 0:
        validation_issues.append(f"Invalid Scheduler Names: {invalid_scheduler_count}")

    # Logs Enabled Validation
    invalid_logs_enabled_count = total_process_count - process_meta['logs_enabled'].str.lower().isin(flags).sum()
    if invalid_logs_enabled_count > 0:
        validation_issues.append(f"Invalid Logs Enabled values: {invalid_logs_enabled_count}")

    # Timezone Validation
    process_meta["timezone"] = process_meta["timezone"].replace('', "UTC").str.upper()
    invalid_timezone_count = total_process_count - process_meta['timezone'].isin(time_zone_list).sum()
    if invalid_timezone_count > 0:
        validation_issues.append(f"Invalid Timezone values: {invalid_timezone_count}")

    # Source and Target Validation
    process_meta_source_filtered = process_meta[process_meta['source'].str.len() != 0]
    invalid_source_type_count = process_meta_source_filtered.shape[0] - process_meta_source_filtered['source_type'].str.lower().isin(source_type_list).sum()
    if invalid_source_type_count > 0:
        validation_issues.append(f"Invalid Source Types: {invalid_source_type_count}")

    process_meta_target_filtered = process_meta[process_meta['target'].str.len() != 0]
    invalid_target_type_count = process_meta_target_filtered.shape[0] - process_meta_target_filtered['target_type'].str.lower().isin(target_type_list).sum()
    if invalid_target_type_count > 0:
        validation_issues.append(f"Invalid Target Types: {invalid_target_type_count}")

    # Cron Validation
    cron_validation_issues = []
    for index, row in process_meta.iterrows():
        schedule = row['schedule_interval']
        frequency = row['frequency'].lower()
        if frequency == 'daily' and not re.match(r'^\d{1,2} \d{1,2} \* \* \*$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for daily frequency - {schedule}")
        elif frequency == 'weekly' and not re.match(r'^\d{1,2} \d{1,2} \* \* (MON|TUE|WED|THU|FRI|SAT|SUN)$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for weekly frequency - {schedule}")
        elif frequency == 'hourly' and not re.match(r'^\d{1,2} \* \* \* \*$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for hourly frequency - {schedule}")
        elif frequency == 'monthly' and not re.match(r'^\d{1,2} \d{1,2} \d{1,2} \* \*$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for monthly frequency - {schedule}")
        elif frequency == 'hourly_custom' and not re.match(r'^\d{1,2} \*/\d{1,2} \* \* \*$', schedule):
            cron_validation_issues.append(f"Row {index + 1}: Invalid cron for custom hourly frequency - {schedule}")
        elif frequency not in ['daily', 'weekly', 'hourly', 'monthly', 'hourly_custom']:
            cron_validation_issues.append(f"Row {index + 1}: Unknown frequency - {frequency}")

    if cron_validation_issues:
        validation_issues.extend(cron_validation_issues)

    # Raise Validation Errors or Load Data
    if validation_issues:
        raise ValueError(f"PROCESS META VALIDATION FAILED:\n\n" + "\n".join(validation_issues))
    else:
        load_table(process_meta, process_table_id)
        print("Data loaded to Process staging Table")

else:
    print("Process Tab is Empty")
