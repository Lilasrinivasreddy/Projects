obs_poc_cnt = process_df['obs_poc'].isna().sum()
                program_name_validation_cnt = process_df['program_name'].isna().sum()
                application_name_validation_cnt = process_df['application_name'].isna().sum()+process_df.loc[process_df['application_name'].str.strip().str.contains(r'\s',case=False), :].shape[0]
                process_name_validation_cnt = process_df['process_name'].isna().sum() +process_df.loc[process_df['process_name'].str.strip().str.contains(r'\s',case=False), :].shape[0]
                subprocess_name_validation_cnt = process_df['subprocess_name'].isna().sum() +process_df.loc[process_df['subprocess_name'].str.strip().str.contains(r'\s',case=False), :].shape[0]
                process_df["frequency"] = process_df["frequency"].str.lower()
                frequency_validation_cnt = process_df['frequency'].isna().sum() + (total_process_count - process_df['frequency'].str.strip().str.lower().isin(frequency_list).sum())
                process_df['is_critical']= process_df['is_critical'].replace('',"N")
                is_critical_validation_cnt = total_process_count-process_df['is_critical'].fillna('n').str.lower().isin(flags).sum()
                platform_name_validtion_cnt = total_process_count - process_df['platform_name'].fillna('na').str.lower().isin(platform_list).sum()
                env_name_validtion_cnt = total_process_count - process_df['env_name'].fillna('na').str.lower().isin(env_list).sum()
                process_poc_validation_cnt =  total_process_count -  process_df.loc[process_df['process_poc'].fillna('na').str.contains(r'[^@]+@[^@]+\.[^@]+',case=False), :].shape[0]
                scheduler_name_validation_cnt =  total_process_count - process_df['scheduler_name'].fillna('na').str.lower().isin(scheduler_list).sum()
                step_id_validation_cnt =  total_process_count - process_df.loc[process_df['step_id'].fillna('1').str.contains(r'[0-9]',case=False), :].shape[0]
                #process_df['logs_enabled' ]= process_df['logs_enabled'].replace('',"N")
                logs_enabled_validation_cnt =  total_process_count - process_df['logs_enabled'].str.lower().isin(flags).sum()
                process_df['is_mandatory'] = process_df['is_mandatory'].replace('',"N")
                is_mandatory_validation_cnt =  total_process_count - process_df['is_mandatory'].fillna('n').str.lower().isin(flags).sum()
                businessunit_validation_cnt =  total_process_count - process_df['businessunit'].fillna('n').str.lower().isin(businessunit_list).sum()
                vsad_validation_cnt = process_df['vsad'].isna().sum()
                #process_df["timezone"] = process_df["timezone"].fillna("UTC")
                process_df["timezone"] = process_df["timezone"].replace('',"UTC")
                process_df["timezone"] = process_df["timezone"].str.upper()
                timezone_validation_cnt = total_process_count - process_df['timezone'].isin(time_zone_list).sum()
                #process_df_source_filtered = process_df[process_df['source'].notna()]
                process_df_source_filtered = process_df[process_df['source'].str.len() != 0]
                source_type_validation_cnt = process_df_source_filtered.shape[0] - process_df_source_filtered['source_type'].str.lower().isin(source_type_list).sum()
                #process_df_target_filtered = process_df[process_df['target'].notna()]
                process_df_target_filtered = process_df[process_df['target'].str.len() != 0]
                target_type_validation_cnt = process_df_target_filtered.shape[0] - process_df_target_filtered['target_type'].str.lower().isin(target_type_list).sum()
                process_df["logs_trace_id_enabled"] = process_df["logs_trace_id_enabled"].fillna('N')
                logs_trace_id_enabled_validation_cnt =  total_process_count - process_df['logs_trace_id_enabled'].fillna('n').str.lower().isin(flags).sum()
                is_active_validation_cnt =  total_process_count - process_df['is_active'].fillna('n').str.lower().isin(flags).sum()
                process_df_is_active_filtered = process_df[process_df['is_active'].isin(['n','N'])]
                reason_is_active_change_validation_cnt = process_df_is_active_filtered.shape[0] - process_df_is_active_filtered[process_df_is_active_filtered['reason_is_active_change']!='nan'].shape[0]
                process_df['run_date_buffer_interval'] = process_df['run_date_buffer_interval'].replace('',"0")
                run_date_buffer_interval_validation_cnt =  total_process_count -process_df.loc[process_df['run_date_buffer_interval'].fillna('0').str.contains(r'[0-9]',case=False), :].shape[0]              
                process_df['collect_volume']=process_df['collect_volume'].replace('',"false")
                collect_volume_validation_cnt =  total_process_count - process_df['collect_volume'].fillna('false').str.lower().isin(bool_flag).sum()
                process_df_volume_query_filtered = process_df[process_df['collect_volume'].isin(['true','TRUE','True'])] 
                volume_query_validation_cnt = process_df_volume_query_filtered.shape[0] - process_df_volume_query_filtered.loc[~process_df_volume_query_filtered['volume_query'].isna(), 'volume_query'].shape[0]
                #process_df['duration_threshold_low_value'] = process_df['duration_threshold_low_value'].fillna('20')
                #process_df['duration_threshold_high_value'] = process_df['duration_threshold_high_value'].fillna('20')
                process_df['duration_threshold_low_value'] = process_df['duration_threshold_low_value'].replace('',"20")
                process_df['duration_threshold_high_value'] = process_df['duration_threshold_high_value'].replace('',"20")
                duration_threshold_low_value_validation_cnt =  total_process_count - process_df.loc[process_df['duration_threshold_low_value'].fillna('20').str.contains(r'[0-9]',case=False), :].shape[0]
                duration_threshold_high_value_validation_cnt =  total_process_count - process_df.loc[process_df['duration_threshold_high_value'].fillna('20').str.contains(r'[0-9]',case=False), :].shape[0]
                
                process_df['additional_info'] = process_df['additional_info'].replace(['NaN', 'nan', ''], np.nan)
                process_df_additional_info_filtered = process_df.dropna(subset = ['additional_info'])
