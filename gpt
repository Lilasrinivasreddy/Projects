def send_opsgenie_jira_outlier_alert(self, reference_key: str):
    try:
        # Updated Query: Fetch records where dq_status = 'LOW' OR sigma_value = 'outlier'
        report_query = f"""                
            SELECT rpt.*, 
                   mtd.data_lob, mtd.data_sub_dmn, mtd.database_name, mtd.table_name, 
                   mtd.data_src, mtd.dq_pillar, mtd.opsgenie_api, mtd.opsgenie_flag
            FROM {config.dqaas_mtd} mtd 
            INNER JOIN 
            (SELECT * FROM {config.dqaas_profile_rpt} 
             WHERE rpt_ref_key = '{reference_key}' 
             AND (dq_status = 'LOW' OR sigma_value = 'outlier') ) rpt
            ON mtd.profile_id = rpt.profile_id
            WHERE upper(mtd.profile_type) = 'RULE_CUSTOM'
        """
        self.logger.info(f"Opsgenie Info Query: {report_query}")

        report_df = self.utils.run_bq_sql(
            bq_auth=config.dq_gcp_auth_payload,
            select_query=report_query
        )
        
        if len(report_df) == 0:
            self.logger.warning("No records found for Opsgenie alert")
            return
        
        self.logger.info(f"Report DataFrame for Opsgenie Alerts: {report_df}")

        for idx in report_df.index:
            alert_type = None
            priority = None

            # Identify if it's a DQ failure or an outlier
            if report_df.loc[idx, 'dq_status'].upper() == "LOW":
                alert_type = 'custom_profile_failed'
                priority = "P3"  # Lower priority for DQ failures

            if report_df.loc[idx, 'sigma_value'].lower() == "outlier":
                alert_type = 'custom_profile_outlier'
                priority = "P2"  # Higher priority for outliers

            if alert_type and report_df.loc[idx, 'opsgenie_flag'].upper() == "Y":
                profile_type = "custom"
                env = config.get_config_values('environment', 'env')
                api_key = report_df.loc[idx, 'opsgenie_api']

                # Use default API key if missing
                if api_key in config.EMPTY_STR_LIST or (isinstance(api_key, float) and math.isnan(api_key)):
                    api_key = config.get_config_values('opsgenie', 'api_key')

                report_df = report_df.rename(columns={col: str(col).upper() for col in report_df.columns.tolist()})
                gcp_http_proxy_url = config.GCP_HTTP_PROXY_URL
                
                # Initialize Opsgenie client
                opsgenie_client = Alert(api_key=api_key, proxy=gcp_http_proxy_url)
                
                # Send Opsgenie alert
                response, request_id, message = opsgenie_client.create_opsgenie_alert(
                    report_df, 0, alert_type, priority, env, profile_type
                )

                self.logger.info(f"Opsgenie response code: {response}")
                self.logger.info(f"Opsgenie alert sent successfully for {alert_type}")

            elif report_df.loc[idx, 'JIRA_ASSIGNEE'] is not None: 
                try:
                    JIRA_ASSIGNEE = report_df.loc[idx, 'JIRA_ASSIGNEE']
                    label = "DQaaS"
                    summary = f"LensX | DQ Issue | Table: {report_df.loc[idx,'TABLE_NAME']}"
                    description = f"DQ Issue detected for Table {report_df.loc[idx,'TABLE_NAME']} on Run Date {report_df.loc[idx,'PRFL_RUN_DT']}."
                    jira_client = Jira_ticket()
                    ticket_id = jira_client.create_jira_ticket(JIRA_ASSIGNEE, summary, description, label)
                    self.logger.info(f"Jira ticket created: {ticket_id}")
                except Exception as err:
                    self.logger.error(f"Error while creating JIRA ticket: {err}")
    
    except Exception as err:
        self.logger.error(f"Error occurred while sending Opsgenie alert. Error: {err}")
