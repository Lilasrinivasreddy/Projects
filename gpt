import math

def send_opsgenie_jira_outlier_alert(self, reference_key: str):
    try:
        self.logger.info(f"Fetching Opsgenie alerts for reference key: {reference_key}")

        # Optimized Query: Fetch required fields only and include Domain Name filtering
        report_query = f"""                
            SELECT rpt.profile_id, rpt.dq_status, rpt.sigma_value, rpt.prfl_run_dt, 
                   mtd.table_name, mtd.opsgenie_api, mtd.opsgenie_flag, mtd.JIRA_ASSIGNEE,
                   mtd."Domain Name"
            FROM {config.dqaas_mtd} mtd 
            INNER JOIN 
            (SELECT profile_id, dq_status, sigma_value, prfl_run_dt 
             FROM {config.dqaas_profile_rpt} 
             WHERE rpt_ref_key = '{reference_key}' 
             AND (dq_status = 'LOW' OR sigma_value = 'outlier') ) rpt
            ON mtd.profile_id = rpt.profile_id
            WHERE upper(mtd.profile_type) = 'RULE_CUSTOM'
            AND mtd."Domain Name" = 'One_ex_Model_DQ_TIER1'  -- Additional filter condition
        """
        self.logger.info(f"Opsgenie Info Query: {report_query}")

        # Fetch data
        report_df = self.utils.run_bq_sql(
            bq_auth=config.dq_gcp_auth_payload,
            select_query=report_query
        )

        if report_df.empty:
            self.logger.warning("No records found for Opsgenie alert.")
            return

        self.logger.info(f"Found {len(report_df)} records for Opsgenie Alerts")

        for idx, row in report_df.iterrows():
            dq_status = row['dq_status'].upper() if isinstance(row['dq_status'], str) else ""
            sigma_value = row['sigma_value'].lower() if isinstance(row['sigma_value'], str) else ""
            opsgenie_flag = row['opsgenie_flag'].upper() if isinstance(row['opsgenie_flag'], str) else "N"
            table_name = row.get('table_name', 'Unknown Table')
            prfl_run_dt = row.get('prfl_run_dt', 'Unknown Date')
            domain_name = row.get("Domain Name", "Unknown Domain")
            jira_assignee = row.get('JIRA_ASSIGNEE')

            # Ensure processing only if Domain Name is 'One_ex_Model_DQ_TIER1'
            if domain_name != "One_ex_Model_DQ_TIER1":
                self.logger.info(f"Skipping record as Domain Name does not match 'One_ex_Model_DQ_TIER1' ({domain_name})")
                continue

            alert_type, priority = None, None
            if dq_status == "LOW":
                alert_type, priority = 'custom_profile_failed', "P3"
            elif sigma_value == "outlier":
                alert_type, priority = 'custom_profile_outlier', "P2"

            if alert_type and opsgenie_flag == "Y":
                profile_type = "custom"
                env = config.get_config_values('environment', 'env')
                api_key = row.get('opsgenie_api', "")

                # Fallback to default API key
                if not api_key or (isinstance(api_key, float) and math.isnan(api_key)):
                    api_key = config.get_config_values('opsgenie', 'api_key')

                gcp_http_proxy_url = config.GCP_HTTP_PROXY_URL
                opsgenie_client = Alert(api_key=api_key, proxy=gcp_http_proxy_url)

                try:
                    response, request_id, message = opsgenie_client.create_opsgenie_alert(
                        report_df, 0, alert_type, priority, env, profile_type
                    )
                    self.logger.info(f"Opsgenie Alert Sent: Type={alert_type}, Response={response}")
                except Exception as e:
                    self.logger.error(f"Failed to send Opsgenie Alert. Error: {e}")

            elif jira_assignee:
                try:
                    summary = f"LensX | DQ Issue | Table: {table_name}"
                    description = f"DQ Issue detected for Table {table_name} on Run Date {prfl_run_dt}."
                    jira_client = Jira_ticket()
                    ticket_id = jira_client.create_jira_ticket(jira_assignee, summary, description, "DQaaS")
                    self.logger.info(f"Jira Ticket Created: {ticket_id}")
                except Exception as e:
                    self.logger.error(f"Failed to create JIRA ticket. Error: {e}")

    except Exception as err:
        self.logger.error(f"Unexpected error in send_opsgenie_jira_outlier_alert: {err}")