def send_opsgenie_alert_for_outliers(self, reference_key: str):
    try:
        # Query to fetch final results where sigma_value = 'outlier'
        report_query = f"""
            SELECT rpt.*, 
                   mtd.data_lob, mtd.data_bus_elem, mtd.db_name, mtd.src_tbl, 
                   mtd.dq_pillar, mtd.opsgenie_api, mtd.opsgenie_flag
            FROM {config.dqaas_profile_mtd} mtd 
            INNER JOIN 
            (SELECT * FROM {config.dqaas_profile_rpt} 
             WHERE rpt_ref_key = '{reference_key}' AND sigma_value = 'outlier') rpt
            ON mtd.prfl_id = rpt.prfl_id
            WHERE upper(mtd.prfl_type) = 'CUSTOM_RULES'
        """
        self.logger.info(f"Opsgenie Query: {report_query}")

        report_df = self.utils.run_bq_sql(
            bq_auth=config.dq_gcp_auth_payload,
            select_query=report_query
        )

        if report_df.empty:
            self.logger.warning("No outlier records found for Opsgenie alert")
            return

        self.logger.info(f"Outlier Records for Opsgenie:\n{report_df}")

        for idx in report_df.index:
            if report_df.loc[idx, 'opsgenie_flag'].upper() == "Y":  
                alert_type = 'custom_profile_outlier'  
                profile_type = "custom"        
                env = config.get_config_values('environment', 'env')  
                priority = "P2"  # High priority for outliers 
                api_key = report_df.loc[idx, 'opsgenie_api']

                # If API key is missing, use default from config
                if api_key in config.EMPTY_STR_LIST or pd.isna(api_key):
                    api_key = config.get_config_values('opsgenie', 'api_key')

                report_df = report_df.rename(columns={col: str(col).upper() for col in report_df.columns.tolist()})
                gcp_http_proxy_url = config.GCP_HTTP_PROXY_URL          
                
                # Initialize Opsgenie client
                opsgenie_client = Alert(api_key=api_key, proxy=gcp_http_proxy_url)
                
                # Send alert
                response, request_id, message = opsgenie_client.create_opsgenie_alert(
                    report_df, 0, alert_type, priority, env, profile_type
                )

                self.logger.info(f"Opsgenie response: {response}")
                self.logger.info("Opsgenie alert sent successfully")

    except Exception as err:
        self.logger.error(f"Error in sending Opsgenie alert for outliers. Error: {err}")



def main_metrics_execution(self, df_mtd: pd.DataFrame, sub_domain: str, start_date: str, end_date: str):
    ...
    ## Loading Results to Report
    self.load_to_report_results(
        df_report_result=df_end_result,
        reference_key=reference_key
    )

    ## Send Email
    self.send_email_report(
        reference_key=reference_key,
        sub_domain=sub_domain
    )

    ## Send Opsgenie Alert for Outliers
    self.send_opsgenie_alert_for_outliers(reference_key)
