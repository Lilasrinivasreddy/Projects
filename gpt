def compare_historical_latest_dimensions(self, df_tbl_hist_rec, df_tbl_latest_rec, comparison_type="WEEKDAYS", isHourly="N"):
    
    self.logger.info('------------------------------------------------------------------')

    # Ensure grouped_columns exists in both DataFrames
    if "grouped_columns" not in df_tbl_hist_rec.columns:
        self.logger.warning("grouped_columns missing in df_tbl_hist_rec, adding with NaN values.")
        df_tbl_hist_rec["grouped_columns"] = np.nan

    if "grouped_columns" not in df_tbl_latest_rec.columns:
        self.logger.warning("grouped_columns missing in df_tbl_latest_rec, adding with NaN values.")
        df_tbl_latest_rec["grouped_columns"] = np.nan

    # Fill missing grouped_columns values with 'UNKNOWN'
    df_tbl_hist_rec['grouped_columns'] = df_tbl_hist_rec['grouped_columns'].fillna('UNKNOWN').astype(str)
    df_tbl_latest_rec['grouped_columns'] = df_tbl_latest_rec['grouped_columns'].fillna('UNKNOWN').astype(str)

    # Debugging log to verify column names before merging
    self.logger.info(f"Columns in df_tbl_hist_rec: {df_tbl_hist_rec.columns}")
    self.logger.info(f"Columns in df_tbl_latest_rec: {df_tbl_latest_rec.columns}")

    ## Merging the Historical and Latest Records
    self.logger.info('------------------------------------------------------------------')

    join_list = ['prfl_id', 'feature_name', 'grouped_columns', 'weekday']
    
    if comparison_type == 'DTRAN_MONTHLY':
        join_list.remove('weekday')

    df_merge_rec = pd.merge(
        df_tbl_hist_rec,
        df_tbl_latest_rec,
        on=join_list,
        how='right'
    )

    self.logger.info(f'Length of the Merged Records : {len(df_merge_rec)}')
    self.logger.info(f'\n{df_merge_rec.columns}\n{df_merge_rec.head()}')
    self.logger.info('------------------------------------------------------------------')

    return df_merge_rec
