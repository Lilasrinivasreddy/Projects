if (
        obs_poc_cnt > 0 or
        program_name_validation_cnt > 0 or
        application_name_validation_cnt > 0 or
        process_name_validation_cnt > 0 or
        subprocess_name_validation_cnt > 0 or
        frequency_validation_cnt > 0 or
        is_critical_validation_cnt > 0 or
        platform_name_validation_cnt > 0 or
        env_name_validation_cnt > 0 or
        process_poc_validation_cnt > 0 or
        scheduler_name_validation_cnt > 0 or
        logs_enabled_validation_cnt > 0 or
        is_mandatory_validation_cnt > 0 or
        businessunit_validation_cnt > 0 or
        vsad_validation_cnt > 0 or
        timezone_validation_cnt > 0 or
        source_type_validation_cnt > 0 or
        target_type_validation_cnt > 0 or
        run_date_buffer_interval_validation_cnt > 0 or
        collect_volume_validation_cnt > 0 or
        duration_threshold_low_value_validation_cnt > 0 or
        duration_threshold_high_value_validation_cnt > 0 or
        additional_info_validation_cnt > 0
    ):
        raise ValueError(
            f"Validation failed with the following counts: \n"
            f"OBS POC Count: {obs_poc_cnt}\n"
            f"Program Name Validation Count: {program_name_validation_cnt}\n"
            f"Application Name Validation Count: {application_name_validation_cnt}\n"
            f"Process Name Validation Count: {process_name_validation_cnt}\n"
            f"Subprocess Name Validation Count: {subprocess_name_validation_cnt}\n"
            f"Frequency Validation Count: {frequency_validation_cnt}\n"
            f"Is Critical Validation Count: {is_critical_validation_cnt}\n"
            f"Platform Name Validation Count: {platform_name_validation_cnt}\n"
            f"Environment Name Validation Count: {env_name_validation_cnt}\n"
            f"Process POC Validation Count: {process_poc_validation_cnt}\n"
            f"Scheduler Name Validation Count: {scheduler_name_validation_cnt}\n"
            f"Logs Enabled Validation Count: {logs_enabled_validation_cnt}\n"
            f"Is Mandatory Validation Count: {is_mandatory_validation_cnt}\n"



if not process_meta.empty:
            # Converting empty string to null values
            process_meta= process_meta.infer_objects(copy=False).replace(r'^\s*$',np.nan,regex=True)
            
            #Remove whitespaces
            process_meta=process_meta.map(lambda x:x.strip() if isinstance(x,str) else x)

            total_process_count = process_meta.shape[0]
            # Updating the Variable
            dictionary = dict(zip(variable_list, dev_list))
            if "dev" in env:
                process_meta.infer_objects(copy=False).replace(dictionary,inplace=True,regex=True)
            elif "test" in env:
                process_meta.infer_objects(copy=False).replace(variable_list, test_list,  inplace=True,regex=True)
            elif "ple" in env:
                process_meta.infer_objects(copy=False).replace(variable_list, ple_list, inplace=True,regex=True)
            else:
                process_meta.infer_objects(copy=False).replace(variable_list, prod_list, inplace=True,regex=True)

            process_meta = process_meta.astype("string")
                #Updating the datatype for Integer Column
            for col in process_integer_column:
                process_meta[col]=process_meta[col].replace('',np.nan).fillna('0').astype(int)

                #Updating the datatype for Boolean Column
            for col in process_boolean_column:
                process_meta[col]=process_meta[col].replace('',np.nan).map({'Y': True,'N':False}).fillna(False)


            # Process Name Validation
            process_name_validation_cnt = process_meta['process_name'].isna().sum() + process_meta.loc[
                process_meta['process_name'].str.strip().str.contains(r'\s', case=False), :].shape[0]

            # Frequency Validation
            process_meta["frequency"] = process_meta["frequency"].str.lower()
            frequency_validation_cnt = process_meta['frequency'].isna().sum() + (
                total_process_count - process_meta['frequency'].str.strip().str.lower().isin(frequency_list).sum())

            # Is Critical Validation
            process_meta['is_critical'] = process_meta['is_critical'].replace('', "N")
            is_critical_validation_cnt = total_process_count - process_meta['is_critical'].fillna('n').str.lower().isin(flags).sum()

            # Platform Name Validation
            platform_name_validation_cnt = total_process_count - process_meta['platform_name'].fillna('na').str.lower().isin(platform_list).sum()

        
            # Process POC Validation (Email Format)
            dev_poc_validation_cnt = total_process_count - process_meta.loc[
                process_meta['dev_poc'].fillna('na').str.contains(r'[^@]+@[^@]+\.[^@]+', case=False), :].shape[0]

            # Scheduler Name Validation
            scheduler_name_validation_cnt = total_process_count - process_meta['scheduler_name'].fillna('na').str.lower().isin(scheduler_list).sum()

            # Logs Enabled Validation
            logs_enabled_validation_cnt = total_process_count - process_meta['logs_enabled'].str.lower().isin(flags).sum()

            # Mandatory Validation
            process_meta['is_mandatory'] = process_meta['is_mandatory'].replace('', "N")
            is_mandatory_validation_cnt = total_process_count - process_meta['is_mandatory'].fillna('n').str.lower().isin(flags).sum()

        
            # VSAD Validation
            vsad_validation_cnt = process_meta['vsad'].isna().sum()

            # Timezone Validation
            process_meta["timezone"] = process_meta["timezone"].replace('', "UTC").str.upper()
            timezone_validation_cnt = total_process_count - process_meta['timezone'].isin(time_zone_list).sum()

            
            # Run Date Buffer Validation
            process_meta['run_date_buffer_interval'] = process_meta['run_date_buffer_interval'].replace('', "0")
            run_date_buffer_interval_validation_cnt = total_process_count - process_meta.loc[
                process_meta['run_date_buffer_interval'].fillna('0').str.contains(r'[0-9]', case=False), :].shape[0]

        
            # Duration Threshold Validation
            process_meta['duration_threshold_low_value'] = process_meta['duration_threshold_low_value'].replace('', "20")
            process_meta['duration_threshold_high_value'] = process_meta['duration_threshold_high_value'].replace('', "20")
            duration_threshold_low_value_validation_cnt = total_process_count - process_meta.loc[
                process_meta['duration_threshold_low_value'].fillna('20').str.contains(r'[0-9]', case=False), :].shape[0]
            duration_threshold_high_value_validation_cnt = total_process_count - process_meta.loc[
                process_meta['duration_threshold_high_value'].fillna('20').str.contains(r'[0-9]', case=False), :].shape[0]

            alert_failure_validation_count_a =  total_process_count - process_meta['alert_failure_by'].fillna('N').str.lower().isin(flags).sum()


