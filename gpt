import time
import logging
from flask import Flask
from opentelemetry import trace
from opentelemetry.instrumentation.requests import RequestsInstrumentor
from opentelemetry.instrumentation.flask import FlaskInstrumentor
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.metrics import Counter, MeterProvider
from opentelemetry.exporter.google_cloud import CloudTraceSpanExporter, CloudMonitoringMetricsExporter
from opentelemetry.sdk.trace.export import SimpleExportSpanProcessor

# Set up logging
logging.basicConfig(level=logging.INFO)

# Set up tracing with Google Cloud Trace exporter
trace.set_tracer_provider(TracerProvider())
tracer = trace.get_tracer(__name__)

# Set up Cloud Trace exporter to send spans to GCP Trace
trace_exporter = CloudTraceSpanExporter()
span_processor = SimpleExportSpanProcessor(trace_exporter)
trace.get_tracer_provider().add_span_processor(span_processor)

# Set up custom metrics (request count)
meter_provider = MeterProvider()
meter = meter_provider.get_meter(__name__)
request_counter = meter.create_counter("requests", description="Count of incoming requests")

# Set up Google Cloud Monitoring exporter for metrics
metrics_exporter = CloudMonitoringMetricsExporter()
meter_provider.start_pipeline(meter, metrics_exporter)

# Set up Flask and requests instrumentation
app = Flask(__name__)
FlaskInstrumentor().instrument_app(app)
RequestsInstrumentor().instrument()

# Define routes
@app.route("/health")
def health():
    with tracer.start_as_current_span("health-check-span"):
        time.sleep(0.5)  # Simulate some processing
        request_counter.add(1)  # Increment request count metric
        return "OK"

@app.route("/data")
def data():
    with tracer.start_as_current_span("data-request-span"):
        time.sleep(1)  # Simulate data processing
        # Simulate external API request
        response = requests.get("https://httpbin.org/get")
        logging.info(f"External API response: {response.status_code}")
        request_counter.add(1)  # Increment request count metric
        return f"Data Retrieved: {response.status_code}"

# Run the Flask app
if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
pip install opentelemetry-api opentelemetry-sdk opentelemetry-instrumentation opentelemetry-exporter-google-cloud
export GOOGLE_APPLICATION_CREDENTIALS="/path/to/your-service-account-key.json"
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"

exporters:
  google_cloud_trace:
    project_id: "your-gcp-project-id"
  google_cloud_monitoring:
    project_id: "your-gcp-project-id"
  google_cloud_logging:
    project_id: "your-gcp-project-id"

service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [google_cloud_trace]
    metrics:
      receivers: [otlp]
      exporters: [google_cloud_monitoring]
    logs:
      receivers: [otlp]
      exporters: [google_cloud_logging]
