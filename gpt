def send_summary_table_level_mail(self, df_mail_summary: pd.DataFrame, error_rules_list: list, rule_run_dt, schd_type, profile_type="Rule"):
    try:
        # Fetch environment dynamically and capitalize it (e.g., Dev, Prod)
        environment = self.config.get('environment', 'env').capitalize()

        self.log.info(f'Summary Result Len: {len(df_mail_summary)}, Error list : {error_rules_list}')
        if len(df_mail_summary) > 0:
            src_table_list = df_mail_summary["table_name"].unique().tolist()
            self.log.info(f'Source Table List: {src_table_list}')
            
            df_rules_error_list = pd.DataFrame.from_records(error_rules_list)
            df_rules_error_list = df_rules_error_list.reset_index(drop=True)
            for tbl in src_table_list:
                product_name = df_mail_summary[df_mail_summary['table_name'] == tbl]['product_name'][0]
                data_sub_dmn = df_mail_summary[df_mail_summary['table_name'] == tbl]['data_sub_dmn'][0]
                self.log.info(f'Product Name: {product_name}')
                self.log.info(f'Data Sub Domain: {data_sub_dmn}')
                self.log.info(f'Source Table: {tbl}')
                try:
                    # Generate dynamic email subject based on schedule type and profile type
                    if schd_type == "DAILY":
                        subject = f'{profile_type.capitalize()} Profiling|{environment}|Daily_Summary|DQ2.0|{rule_run_dt}'
                    elif schd_type == "MONTHLY":
                        subject = f'{profile_type.capitalize()} Profiling|{environment}|Monthly_Summary|DQ2.0|{rule_run_dt}'
                    else:
                        subject = f'{profile_type.capitalize()} Profiling|{environment}|Adhoc_Summary|DQ2.0|{rule_run_dt}'

                    self.log.info(f'Email Subject: {subject}')

                    # Prepare the email body
                    message = 'Please find the below summary.<br>'
                    email_cols_list = ['rule_run_dt', 'db_name', 'table_name', 'src_col', 'dq_pillar',
                                       'rule_name', 'col_vld_cnt', 'col_invld_cnt', 'col_vld_pct', 'dq_status']

                    df_email_rules_data: pd.DataFrame = df_mail_summary[email_cols_list][df_mail_summary["table_name"] == tbl]
                    if len(df_email_rules_data) > 0:
                        df_email_rules_data = df_email_rules_data.sort_values(by=['col_vld_pct'])
                        df_email_rules_data['col_vld_pct'] = df_email_rules_data['col_vld_pct'].astype(float).map(self.round_off)

                        self.log.info(f'SQL Profile eMail Columns: {df_email_rules_data.columns.tolist()}')
                        df_email_rules_data = df_email_rules_data.rename(columns={  
                                                                                'db_name': 'Database',
                                                                                'table_name': 'Table',
                                                                                'src_col': 'Column',
                                                                                'dq_pillar': 'DQ Pillar',
                                                                                'rule_name': 'Measure',
                                                                                'col_vld_cnt': 'Valid Count',
                                                                                'col_invld_cnt': 'Invalid Count',
                                                                                'col_vld_pct': 'DQ Score',
                                                                                'dq_status': 'Indicator',
                                                                                'rule_run_dt': 'Date'})
                        df_email_rules_data = df_email_rules_data.reset_index(drop=True)

                    # Add error rules to the email body, if any
                    if len(df_rules_error_list) > 0:
                        df_rules_error_list_email = df_rules_error_list[df_rules_error_list["table"] == tbl]
                        df_rules_error_list_email = df_rules_error_list_email.reset_index(drop=True)
                        if len(df_rules_error_list_email) > 0:
                            addl_msg = f'<br><b>Rule Profile Error List:</b>{df_rules_error_list_email.to_html()}'
                            message += addl_msg

                    # Send the email
                    self.email.send_common_message(
                        email_template_filepath=self.email_template,
                        mail_subject=subject,
                        message=message,
                        receipents_email_id=self.summary_alert_email_group,
                        df_val=df_email_rules_data
                    )
                    self.log.info(f'Successfully Triggered {tbl} Summary Email for DQ-2.0')
                except Exception as e:
                    self.log.error(f'Error Occurred in {tbl} Summary Email for DQ-2.0. Error:{e}')
                continue

    except Exception as e:
        self.log.error(f'Error Occurred in Summary Email for DQ-2.0. Error:{e}')
        self.opsgenie_alert(priority="P1",
                            message='DQ-2.0 - Summary Email Error',
                            description=f'Failure Occurred while sending summary email',
                            details={'Message': 'DQ-2.0 - Summary Email Error'},
                            alert_type="Exception")

â‰ˆ===========


def send_summary_table_level_mail(self, df_mail_summary: pd.DataFrame, error_rules_list: list, rule_run_dt, schd_type, profile_type="Rule"):
    try:
        self.log.info(f'Summary Result Len: {len(df_mail_summary)}, Error list : {error_rules_list}')
        
        # Fetch environment dynamically and capitalize it (e.g., "Dev", "Prod")
        environment = self.config.get('environment', 'env').capitalize()

        if len(df_mail_summary) > 0:
            src_table_list = df_mail_summary["table_name"].unique().tolist()
            self.log.info(f'Source Table List: {src_table_list}')
            
            df_rules_error_list = pd.DataFrame.from_records(error_rules_list)
            df_rules_error_list = df_rules_error_list.reset_index(drop=True)
            for tbl in src_table_list:
                product_name = df_mail_summary[df_mail_summary['table_name'] == tbl]['product_name'].iloc[0]
                data_sub_dmn = df_mail_summary[df_mail_summary['table_name'] == tbl]['data_sub_dmn'].iloc[0]
                self.log.info(f'Product Name: {product_name}')
                self.log.info(f'Data Sub Domain: {data_sub_dmn}')
                self.log.info(f'Source Table: {tbl}')
                try:
                    # Dynamic email subject for Rule, Auto, or Custom profiling
                    if schd_type == "DAILY":
                        subject = f'{profile_type.capitalize()} Profiling|{environment}|Daily_Summary|DQ2.0|{rule_run_dt}'
                    elif schd_type == "MONTHLY":
                        subject = f'{profile_type.capitalize()} Profiling|{environment}|Monthly_Summary|DQ2.0|{rule_run_dt}'
                    else:
                        subject = f'{profile_type.capitalize()} Profiling|{environment}|Adhoc_Summary|DQ2.0|{rule_run_dt}'

                    self.log.info(f'Email Subject: {subject}')

                    # Prepare the email body
                    message = 'Please find the below summary.<br>'
                    email_cols_list = ['rule_run_dt', 'db_name', 'table_name', 'src_col', 'dq_pillar',
                                       'rule_name', 'col_vld_cnt', 'col_invld_cnt', 'col_vld_pct', 'dq_status']

                    df_email_rules_data: pd.DataFrame = df_mail_summary[email_cols_list][df_mail_summary["table_name"] == tbl]
                    if len(df_email_rules_data) > 0:
                        df_email_rules_data = df_email_rules_data.sort_values(by=['col_vld_pct'])
                        df_email_rules_data['col_vld_pct'] = df_email_rules_data['col_vld_pct'].astype(float).map(self.round_off)

                        self.log.info(f'SQL Profile Email Columns: {df_email_rules_data.columns.tolist()}')
                        df_email_rules_data = df_email_rules_data.rename(columns={  
                            'db_name': 'Database',
                            'table_name': 'Table',
                            'src_col': 'Column',
                            'dq_pillar': 'DQ Pillar',
                            'rule_name': 'Measure',
                            'col_vld_cnt': 'Valid Count',
                            'col_invld_cnt': 'Invalid Count',
                            'col_vld_pct': 'DQ Score',
                            'dq_status': 'Indicator',
                            'rule_run_dt': 'Date'
                        })
                        df_email_rules_data = df_email_rules_data.reset_index(drop=True)

                    # Add error rules to the email body, if any
                    if len(df_rules_error_list) > 0:
                        df_rules_error_list_email = df_rules_error_list[df_rules_error_list["table"] == tbl]
                        df_rules_error_list_email = df_rules_error_list_email.reset_index(drop=True)
                        if len(df_rules_error_list_email) > 0:
                            addl_msg = f'<br><b>Rule Profile Error List:</b>{df_rules_error_list_email.to_html()}'
                            message += addl_msg

                    # Send the email
                    self.email.send_common_message(
                        email_template_filepath=self.email_template,
                        mail_subject=subject,
                        message=message,
                        receipents_email_id=self.summary_alert_email_group,
                        df_val=df_email_rules_data
                    )
                    self.log.info(f'Successfully Triggered {tbl} Summary Email for DQ-2.0')
                except Exception as e:
                    self.log.error(f'Error Occurred in {tbl} Summary Email for DQ-2.0. Error:{e}')
                continue

    except Exception as e:
        self.log.error(f'Error Occurred in Summary Email for DQ-2.0. Error:{e}')
        self.opsgenie_alert(priority="P1",
                            message='DQ-2.0 - Summary Email Error',
                            description=f'Failure Occurred while sending summary email',
                            details={'Message': 'DQ-2.0 - Summary Email Error'},
                            alert_type="Exception")