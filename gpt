def request_auto_profile_engine(self, logger: logging, utils: CommonUtils, data_src: str, df_val: pd.DataFrame):
    sub_domain_list = df_val['DATA_SUB_DMN'].unique().tolist()
    self.logger.info(f'Sub Domain List: {sub_domain_list}')
    
    environment = self.config.get('environment', 'env')
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    if self.run_type == "RR":
        mail_subject_msg = f"LensX|{environment}|Auto Rerun Profiling Started|DQ2.0|{current_time}"
    else:
        mail_subject_msg = f"LensX|{environment}|Auto Profiling Started|DQ2.0|{current_time}"
    
    email_obj = SendEmail()
    email_obj.send_common_message(
        email_template_filepath="auto_profile_template.html",
        mail_subject=mail_subject_msg,
        message="DQ-2.0 Auto Profiling has started",
        receipents_email_id=config.auto_profile_email_group
    )

    for sub_domain in sub_domain_list:
        try:
            self.logger.info(f'Sub Domain: {sub_domain}, Initiating Profiling')
            df_tbl_list = df_val[df_val['DATA_SUB_DMN'] == sub_domain].reset_index(drop=True)
            self.logger.info(f'Records Count: {len(df_tbl_list)}')

            # Initiating Auto Profile Engine
            AutoProfileEngine(data_src=data_src).call_auto_profile_engine(df_input=df_tbl_list, run_type=self.run_type)
            self.logger.info(f'Sub Domain: {sub_domain} - Profiling Completed')

        except Exception as err:
            self.logger.error(f"Error While Profiling the Table of Sub Domain({sub_domain}). Error: {err}")

        self.logger.info('-------------------------------------------------------------')

    # Send Completion Email
    mail_subject_msg = f"LensX|{environment}|Auto Profiling Ended|DQ2.0|{current_time}"
    email_obj.send_common_message(
        email_template_filepath="auto_profile_template.html",
        mail_subject=mail_subject_msg,
        message="DQ-2.0 Auto Profiling has ended",
        receipents_email_id=config.auto_profile_email_group
    )

    self.logger.info(f'Request for Auto Profiling Completed...')
    self.logger.info('-------------------------------------------------------------')
==================================================

def request_custom_profile_engine(self, logger: logging, df_val: pd.DataFrame):
    environment = self.config.get('environment', 'env')
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    mail_subject_msg = f"LensX|{environment}|Custom Profiling Started|DQ2.0|{current_time}"
    
    email_obj = SendEmail()
    email_obj.send_common_message(
        email_template_filepath="custom_profile_template.html",
        mail_subject=mail_subject_msg,
        message="DQ-2.0 Custom Profiling has started",
        receipents_email_id=config.custom_profile_email_group
    )

    df_val = df_val.rename(columns={col: str(col).lower() for col in df_val.columns.tolist()})
    df_val["comparison_type"] = df_val["comparison_type"].fillna("WEEKDAYS")
    df_val["run_frequency"] = df_val["run_frequency"].fillna("N")
    dfGroupList = df_val[["data_sub_dmn", "comparison_type", "run_frequency"]].drop_duplicates()
    process_date = "current_date-1"
    business_date = "current_date-1"
    cmObj = CustomeMetrics()

    logger.info(f'Request for Custom Profiling Initiated...\nTotal Records: {len(df_val)}\n{dfGroupList}')
    logger.info("---------------------------------------------------------------------")

    for row in dfGroupList.itertuples():
        try:
            logger.info(f'Sub Domain: {row.data_sub_dmn}, Comparison : {row.comparison_type}, Hourly: {row.run_frequency} Initiating Profiling')

            df_tbl_list = df_val[
                (df_val["data_sub_dmn"] == row.data_sub_dmn) & 
                (df_val["comparison_type"] == row.comparison_type) &
                (df_val["run_frequency"] == row.run_frequency)
            ].reset_index(drop=True)

            logger.info(f'Records Count: {len(df_tbl_list)}')

            # Initiating Custom Profile Engine
            cmObj.main_metrics_execution(
                df_mtd=df_tbl_list,
                sub_domain=row.data_sub_dmn,
                start_date=business_date,
                end_date=process_date
            )

            logger.info(f'Sub Domain: {row.data_sub_dmn}, Comparison : {row.comparison_type} - Custom Profiling Completed')

        except Exception as err:
            logger.error(f"Error While Profiling the Table of Sub Domain({row.data_sub_dmn}, Comparison : {row.comparison_type}) and Hourly: {row.run_frequency}. Error: {err}")

        logger.info("---------------------------------------------------------------------")

    # Send Completion Email
    mail_subject_msg = f"LensX|{environment}|Custom Profiling Ended|DQ2.0|{current_time}"
    email_obj.send_common_message(
        email_template_filepath="custom_profile_template.html",
        mail_subject=mail_subject_msg,
        message="DQ-2.0 Custom Profiling has ended",
        receipents_email_id=config.custom_profile_email_group
    )

    logger.info(f'Request for Custom Profiling Completed...')
    logger.info('-------------------------------------------------------------')
